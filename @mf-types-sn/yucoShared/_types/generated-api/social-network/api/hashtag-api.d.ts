/**
 * Yuco Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosConfiguration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { HashtagListSchema } from '../model';
import type { HashtagWithCount } from '../model';
import type { HashtagWithFollowingFlagList } from '../model';
/**
 * HashtagApi - axios parameter creator
 * @export
 */
export declare const HashtagApiAxiosParamCreator: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Follow Hashtag View
     * @param {number} hashtagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followHashtagViewPost: (hashtagId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Fields are used for offset (together only):  - score: float - followers_count: int - id: int  ## ?offset=\'last_score,last_followers_count,last_id\'  ## Example: &offset=\'32.2,123,40\'
     * @summary Get Followed Hashtags View
     * @param {number} userId
     * @param {string} [query] Query to find hashtags.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example: &amp;offset&#x3D;45.12,123,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedHashtagsViewGet: (userId: number, query?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Hashtag By Name View
     * @param {string} hashtagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHashtagByNameViewGet: (hashtagName: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Get Hashtags View
     * @param {string} query Query to find hashtags.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHashtagsViewGet: (query: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Unfollow Hashtag View
     * @param {number} hashtagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowHashtagViewDelete: (hashtagId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * HashtagApi - functional programming interface
 * @export
 */
export declare const HashtagApiFp: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Follow Hashtag View
     * @param {number} hashtagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    followHashtagViewPost(hashtagId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - followers_count: int - id: int  ## ?offset=\'last_score,last_followers_count,last_id\'  ## Example: &offset=\'32.2,123,40\'
     * @summary Get Followed Hashtags View
     * @param {number} userId
     * @param {string} [query] Query to find hashtags.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example: &amp;offset&#x3D;45.12,123,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getFollowedHashtagsViewGet(userId: number, query?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HashtagWithFollowingFlagList>>;
    /**
     *
     * @summary Get Hashtag By Name View
     * @param {string} hashtagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHashtagByNameViewGet(hashtagName: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HashtagWithCount>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Get Hashtags View
     * @param {string} query Query to find hashtags.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHashtagsViewGet(query: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HashtagListSchema>>;
    /**
     *
     * @summary Unfollow Hashtag View
     * @param {number} hashtagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unfollowHashtagViewDelete(hashtagId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * Request parameters for followHashtagViewPost operation in HashtagApi.
 * @export
 * @interface HashtagApiFollowHashtagViewPostRequest
 */
export interface HashtagApiFollowHashtagViewPostRequest {
    /**
     *
     * @type {number}
     * @memberof HashtagApiFollowHashtagViewPost
     */
    readonly hashtagId: number;
}
/**
 * Request parameters for getFollowedHashtagsViewGet operation in HashtagApi.
 * @export
 * @interface HashtagApiGetFollowedHashtagsViewGetRequest
 */
export interface HashtagApiGetFollowedHashtagsViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof HashtagApiGetFollowedHashtagsViewGet
     */
    readonly userId: number;
    /**
     * Query to find hashtags.
     * @type {string}
     * @memberof HashtagApiGetFollowedHashtagsViewGet
     */
    readonly query?: string;
    /**
     * Values of last received row which used in sort. Passed asa string and separeted by commas. Example: &amp;offset&#x3D;45.12,123,10
     * @type {string}
     * @memberof HashtagApiGetFollowedHashtagsViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof HashtagApiGetFollowedHashtagsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for getHashtagByNameViewGet operation in HashtagApi.
 * @export
 * @interface HashtagApiGetHashtagByNameViewGetRequest
 */
export interface HashtagApiGetHashtagByNameViewGetRequest {
    /**
     *
     * @type {string}
     * @memberof HashtagApiGetHashtagByNameViewGet
     */
    readonly hashtagName: string;
}
/**
 * Request parameters for getHashtagsViewGet operation in HashtagApi.
 * @export
 * @interface HashtagApiGetHashtagsViewGetRequest
 */
export interface HashtagApiGetHashtagsViewGetRequest {
    /**
     * Query to find hashtags.
     * @type {string}
     * @memberof HashtagApiGetHashtagsViewGet
     */
    readonly query: string;
    /**
     * Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @type {string}
     * @memberof HashtagApiGetHashtagsViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof HashtagApiGetHashtagsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for unfollowHashtagViewDelete operation in HashtagApi.
 * @export
 * @interface HashtagApiUnfollowHashtagViewDeleteRequest
 */
export interface HashtagApiUnfollowHashtagViewDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof HashtagApiUnfollowHashtagViewDelete
     */
    readonly hashtagId: number;
}
/**
 * HashtagApi - interface
 * @export
 * @interface HashtagApi
 */
export interface HashtagApiInterface {
    /**
     *
     * @summary Follow Hashtag View
     * @param {number} hashtagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApiInterface
     */
    followHashtagViewPost(requestParameters: HashtagApiFollowHashtagViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * ## Fields are used for offset (together only):  - score: float - followers_count: int - id: int  ## ?offset=\'last_score,last_followers_count,last_id\'  ## Example: &offset=\'32.2,123,40\'
     * @summary Get Followed Hashtags View
     * @param {number} userId
     * @param {string} [query] Query to find hashtags.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example: &amp;offset&#x3D;45.12,123,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApiInterface
     */
    getFollowedHashtagsViewGet(requestParameters: HashtagApiGetFollowedHashtagsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<HashtagWithFollowingFlagList>;
    /**
     *
     * @summary Get Hashtag By Name View
     * @param {string} hashtagName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApiInterface
     */
    getHashtagByNameViewGet(requestParameters: HashtagApiGetHashtagByNameViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<HashtagWithCount>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Get Hashtags View
     * @param {string} query Query to find hashtags.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApiInterface
     */
    getHashtagsViewGet(requestParameters: HashtagApiGetHashtagsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<HashtagListSchema>;
    /**
     *
     * @summary Unfollow Hashtag View
     * @param {number} hashtagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApiInterface
     */
    unfollowHashtagViewDelete(requestParameters: HashtagApiUnfollowHashtagViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
}
/**
 * HashtagApi - object-oriented interface
 * @export
 * @class HashtagApi
 * @extends {BaseAPI}
 */
export declare class HashtagApi extends BaseAPI implements HashtagApiInterface {
    /**
     *
     * @summary Follow Hashtag View
     * @param {HashtagApiFollowHashtagViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApi
     */
    followHashtagViewPost(requestParameters: HashtagApiFollowHashtagViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - followers_count: int - id: int  ## ?offset=\'last_score,last_followers_count,last_id\'  ## Example: &offset=\'32.2,123,40\'
     * @summary Get Followed Hashtags View
     * @param {HashtagApiGetFollowedHashtagsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApi
     */
    getFollowedHashtagsViewGet(requestParameters: HashtagApiGetFollowedHashtagsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HashtagWithFollowingFlagList, any>>;
    /**
     *
     * @summary Get Hashtag By Name View
     * @param {HashtagApiGetHashtagByNameViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApi
     */
    getHashtagByNameViewGet(requestParameters: HashtagApiGetHashtagByNameViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HashtagWithCount, any>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Get Hashtags View
     * @param {HashtagApiGetHashtagsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApi
     */
    getHashtagsViewGet(requestParameters: HashtagApiGetHashtagsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HashtagListSchema, any>>;
    /**
     *
     * @summary Unfollow Hashtag View
     * @param {HashtagApiUnfollowHashtagViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof HashtagApi
     */
    unfollowHashtagViewDelete(requestParameters: HashtagApiUnfollowHashtagViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
