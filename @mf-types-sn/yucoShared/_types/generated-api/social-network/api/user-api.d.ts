/**
 * Yuco Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosConfiguration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { LiveTokenModel } from '../model';
import type { OpenHiddenLists } from '../model';
import type { StoryHiddenList } from '../model';
import type { UpdateCurrentUser } from '../model';
import type { UpdateGlobalSettings } from '../model';
import type { UserDetailWithFlags } from '../model';
import type { UserGlobalSettings } from '../model';
import type { UserMeSchema } from '../model';
import type { UserModelWithPhoto } from '../model';
import type { UserPinSchema } from '../model';
import type { UserSearchListSchema } from '../model';
import type { UserSecretKey } from '../model';
import type { UserSecretKeyUpdateSchema } from '../model';
import type { UsersWithFollowIndicators } from '../model';
/**
 * UserApi - axios parameter creator
 * @export
 */
export declare const UserApiAxiosParamCreator: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Block User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockUserViewPost: (userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete User View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserViewDelete: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - username: str
     * @summary Get Global Story Hidden List View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGlobalStoryHiddenListViewGet: (sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Self View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfViewGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get User Secret Keys View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSecretKeysViewGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get User Settings View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSettingsViewGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserViewGet: (userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int - name: str - username: str
     * @summary List User View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {string} [query] Query for search by username and name.
     * @param {number} [followers] Subscribers of the user. You need to pass the user ID
     * @param {number} [followings] User subscriptions. You need to pass the user ID
     * @param {number} [followingsOrFollowers] Subscribers and user subscriptions. You need to pass the user ID
     * @param {boolean} [followCandidates] follow_candidates
     * @param {boolean} [blacklist] User blacklist.
     * @param {number} [friends] User friends. You need to pass the user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserViewGet: (sort?: string, offset?: string, limit?: number, query?: string, followers?: number, followings?: number, followingsOrFollowers?: number, followCandidates?: boolean, blacklist?: boolean, friends?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Fields are used for offset (together only):  - score: float - followers_count: int - id: int  ## ?offset=\'last_score,last_followers_count,last_id\'  ## Example: &offset=\'32.2,1241,40\'
     * @summary Search Users View
     * @param {string} query Query to find users.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10,3
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUsersViewGet: (query: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set User Pin View
     * @param {UserPinSchema} userPinSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserPinViewPost: (userPinSchema: UserPinSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Start Live View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startLiveViewGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Unblock User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unblockUserViewPost: (userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Update current user fields:  The update occurs partially. You can only send the fields that have been changed. If some field should have a null value, then send a field with a null value.  Some fields are not available for updating, since they can only be accessed by a certain type of user.  ```     Example Request {             \"sex\": \"male\",             \"birthday\": \"2000-08-07\"     } ```
     * @summary Update Current User View
     * @param {UpdateCurrentUser} updateCurrentUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserViewPatch: (updateCurrentUser: UpdateCurrentUser, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Global Hide List View
     * @param {OpenHiddenLists} openHiddenLists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGlobalHideListViewPatch: (openHiddenLists: OpenHiddenLists, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Secret Keys View
     * @param {UserSecretKeyUpdateSchema} userSecretKeyUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSecretKeysViewPatch: (userSecretKeyUpdateSchema: UserSecretKeyUpdateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update User Settings View
     * @param {UpdateGlobalSettings} updateGlobalSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserSettingsViewPatch: (updateGlobalSettings: UpdateGlobalSettings, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Verify User Pin View
     * @param {UserPinSchema} userPinSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyUserPinViewPost: (userPinSchema: UserPinSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UserApi - functional programming interface
 * @export
 */
export declare const UserApiFp: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Block User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    blockUserViewPost(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Delete User View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserViewDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - username: str
     * @summary Get Global Story Hidden List View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getGlobalStoryHiddenListViewGet(sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryHiddenList>>;
    /**
     *
     * @summary Get Self View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSelfViewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserMeSchema>>;
    /**
     *
     * @summary Get User Secret Keys View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSecretKeysViewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSecretKey>>;
    /**
     *
     * @summary Get User Settings View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserSettingsViewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGlobalSettings>>;
    /**
     *
     * @summary Get User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserViewGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailWithFlags>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int - name: str - username: str
     * @summary List User View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {string} [query] Query for search by username and name.
     * @param {number} [followers] Subscribers of the user. You need to pass the user ID
     * @param {number} [followings] User subscriptions. You need to pass the user ID
     * @param {number} [followingsOrFollowers] Subscribers and user subscriptions. You need to pass the user ID
     * @param {boolean} [followCandidates] follow_candidates
     * @param {boolean} [blacklist] User blacklist.
     * @param {number} [friends] User friends. You need to pass the user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listUserViewGet(sort?: string, offset?: string, limit?: number, query?: string, followers?: number, followings?: number, followingsOrFollowers?: number, followCandidates?: boolean, blacklist?: boolean, friends?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UsersWithFollowIndicators>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - followers_count: int - id: int  ## ?offset=\'last_score,last_followers_count,last_id\'  ## Example: &offset=\'32.2,1241,40\'
     * @summary Search Users View
     * @param {string} query Query to find users.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10,3
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchUsersViewGet(query: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSearchListSchema>>;
    /**
     *
     * @summary Set User Pin View
     * @param {UserPinSchema} userPinSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setUserPinViewPost(userPinSchema: UserPinSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Start Live View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    startLiveViewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LiveTokenModel>>;
    /**
     *
     * @summary Unblock User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unblockUserViewPost(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * ## Update current user fields:  The update occurs partially. You can only send the fields that have been changed. If some field should have a null value, then send a field with a null value.  Some fields are not available for updating, since they can only be accessed by a certain type of user.  ```     Example Request {             \"sex\": \"male\",             \"birthday\": \"2000-08-07\"     } ```
     * @summary Update Current User View
     * @param {UpdateCurrentUser} updateCurrentUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCurrentUserViewPatch(updateCurrentUser: UpdateCurrentUser, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModelWithPhoto>>;
    /**
     *
     * @summary Update Global Hide List View
     * @param {OpenHiddenLists} openHiddenLists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateGlobalHideListViewPatch(openHiddenLists: OpenHiddenLists, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Update Secret Keys View
     * @param {UserSecretKeyUpdateSchema} userSecretKeyUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSecretKeysViewPatch(userSecretKeyUpdateSchema: UserSecretKeyUpdateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserSecretKey>>;
    /**
     *
     * @summary Update User Settings View
     * @param {UpdateGlobalSettings} updateGlobalSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserSettingsViewPatch(updateGlobalSettings: UpdateGlobalSettings, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserGlobalSettings>>;
    /**
     *
     * @summary Verify User Pin View
     * @param {UserPinSchema} userPinSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    verifyUserPinViewPost(userPinSchema: UserPinSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * Request parameters for blockUserViewPost operation in UserApi.
 * @export
 * @interface UserApiBlockUserViewPostRequest
 */
export interface UserApiBlockUserViewPostRequest {
    /**
     *
     * @type {number}
     * @memberof UserApiBlockUserViewPost
     */
    readonly userId: number;
}
/**
 * Request parameters for getGlobalStoryHiddenListViewGet operation in UserApi.
 * @export
 * @interface UserApiGetGlobalStoryHiddenListViewGetRequest
 */
export interface UserApiGetGlobalStoryHiddenListViewGetRequest {
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof UserApiGetGlobalStoryHiddenListViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof UserApiGetGlobalStoryHiddenListViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof UserApiGetGlobalStoryHiddenListViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for getUserViewGet operation in UserApi.
 * @export
 * @interface UserApiGetUserViewGetRequest
 */
export interface UserApiGetUserViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof UserApiGetUserViewGet
     */
    readonly userId: number;
}
/**
 * Request parameters for listUserViewGet operation in UserApi.
 * @export
 * @interface UserApiListUserViewGetRequest
 */
export interface UserApiListUserViewGetRequest {
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof UserApiListUserViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof UserApiListUserViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof UserApiListUserViewGet
     */
    readonly limit?: number;
    /**
     * Query for search by username and name.
     * @type {string}
     * @memberof UserApiListUserViewGet
     */
    readonly query?: string;
    /**
     * Subscribers of the user. You need to pass the user ID
     * @type {number}
     * @memberof UserApiListUserViewGet
     */
    readonly followers?: number;
    /**
     * User subscriptions. You need to pass the user ID
     * @type {number}
     * @memberof UserApiListUserViewGet
     */
    readonly followings?: number;
    /**
     * Subscribers and user subscriptions. You need to pass the user ID
     * @type {number}
     * @memberof UserApiListUserViewGet
     */
    readonly followingsOrFollowers?: number;
    /**
     * follow_candidates
     * @type {boolean}
     * @memberof UserApiListUserViewGet
     */
    readonly followCandidates?: boolean;
    /**
     * User blacklist.
     * @type {boolean}
     * @memberof UserApiListUserViewGet
     */
    readonly blacklist?: boolean;
    /**
     * User friends. You need to pass the user ID
     * @type {number}
     * @memberof UserApiListUserViewGet
     */
    readonly friends?: number;
}
/**
 * Request parameters for searchUsersViewGet operation in UserApi.
 * @export
 * @interface UserApiSearchUsersViewGetRequest
 */
export interface UserApiSearchUsersViewGetRequest {
    /**
     * Query to find users.
     * @type {string}
     * @memberof UserApiSearchUsersViewGet
     */
    readonly query: string;
    /**
     * Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10,3
     * @type {string}
     * @memberof UserApiSearchUsersViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof UserApiSearchUsersViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for setUserPinViewPost operation in UserApi.
 * @export
 * @interface UserApiSetUserPinViewPostRequest
 */
export interface UserApiSetUserPinViewPostRequest {
    /**
     *
     * @type {UserPinSchema}
     * @memberof UserApiSetUserPinViewPost
     */
    readonly userPinSchema: UserPinSchema;
}
/**
 * Request parameters for unblockUserViewPost operation in UserApi.
 * @export
 * @interface UserApiUnblockUserViewPostRequest
 */
export interface UserApiUnblockUserViewPostRequest {
    /**
     *
     * @type {number}
     * @memberof UserApiUnblockUserViewPost
     */
    readonly userId: number;
}
/**
 * Request parameters for updateCurrentUserViewPatch operation in UserApi.
 * @export
 * @interface UserApiUpdateCurrentUserViewPatchRequest
 */
export interface UserApiUpdateCurrentUserViewPatchRequest {
    /**
     *
     * @type {UpdateCurrentUser}
     * @memberof UserApiUpdateCurrentUserViewPatch
     */
    readonly updateCurrentUser: UpdateCurrentUser;
}
/**
 * Request parameters for updateGlobalHideListViewPatch operation in UserApi.
 * @export
 * @interface UserApiUpdateGlobalHideListViewPatchRequest
 */
export interface UserApiUpdateGlobalHideListViewPatchRequest {
    /**
     *
     * @type {OpenHiddenLists}
     * @memberof UserApiUpdateGlobalHideListViewPatch
     */
    readonly openHiddenLists: OpenHiddenLists;
}
/**
 * Request parameters for updateSecretKeysViewPatch operation in UserApi.
 * @export
 * @interface UserApiUpdateSecretKeysViewPatchRequest
 */
export interface UserApiUpdateSecretKeysViewPatchRequest {
    /**
     *
     * @type {UserSecretKeyUpdateSchema}
     * @memberof UserApiUpdateSecretKeysViewPatch
     */
    readonly userSecretKeyUpdateSchema: UserSecretKeyUpdateSchema;
}
/**
 * Request parameters for updateUserSettingsViewPatch operation in UserApi.
 * @export
 * @interface UserApiUpdateUserSettingsViewPatchRequest
 */
export interface UserApiUpdateUserSettingsViewPatchRequest {
    /**
     *
     * @type {UpdateGlobalSettings}
     * @memberof UserApiUpdateUserSettingsViewPatch
     */
    readonly updateGlobalSettings: UpdateGlobalSettings;
}
/**
 * Request parameters for verifyUserPinViewPost operation in UserApi.
 * @export
 * @interface UserApiVerifyUserPinViewPostRequest
 */
export interface UserApiVerifyUserPinViewPostRequest {
    /**
     *
     * @type {UserPinSchema}
     * @memberof UserApiVerifyUserPinViewPost
     */
    readonly userPinSchema: UserPinSchema;
}
/**
 * UserApi - interface
 * @export
 * @interface UserApi
 */
export interface UserApiInterface {
    /**
     *
     * @summary Block User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    blockUserViewPost(requestParameters: UserApiBlockUserViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Delete User View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    deleteUserViewDelete(options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * ## Available fields for *sort* and *offset*:  - username: str
     * @summary Get Global Story Hidden List View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getGlobalStoryHiddenListViewGet(requestParameters: UserApiGetGlobalStoryHiddenListViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StoryHiddenList>;
    /**
     *
     * @summary Get Self View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getSelfViewGet(options?: RawAxiosRequestConfig): AxiosPromise<UserMeSchema>;
    /**
     *
     * @summary Get User Secret Keys View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserSecretKeysViewGet(options?: RawAxiosRequestConfig): AxiosPromise<UserSecretKey>;
    /**
     *
     * @summary Get User Settings View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserSettingsViewGet(options?: RawAxiosRequestConfig): AxiosPromise<UserGlobalSettings>;
    /**
     *
     * @summary Get User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    getUserViewGet(requestParameters: UserApiGetUserViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserDetailWithFlags>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int - name: str - username: str
     * @summary List User View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {string} [query] Query for search by username and name.
     * @param {number} [followers] Subscribers of the user. You need to pass the user ID
     * @param {number} [followings] User subscriptions. You need to pass the user ID
     * @param {number} [followingsOrFollowers] Subscribers and user subscriptions. You need to pass the user ID
     * @param {boolean} [followCandidates] follow_candidates
     * @param {boolean} [blacklist] User blacklist.
     * @param {number} [friends] User friends. You need to pass the user ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    listUserViewGet(requestParameters: UserApiListUserViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UsersWithFollowIndicators>;
    /**
     * ## Fields are used for offset (together only):  - score: float - followers_count: int - id: int  ## ?offset=\'last_score,last_followers_count,last_id\'  ## Example: &offset=\'32.2,1241,40\'
     * @summary Search Users View
     * @param {string} query Query to find users.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10,3
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    searchUsersViewGet(requestParameters: UserApiSearchUsersViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSearchListSchema>;
    /**
     *
     * @summary Set User Pin View
     * @param {UserPinSchema} userPinSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    setUserPinViewPost(requestParameters: UserApiSetUserPinViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Start Live View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    startLiveViewGet(options?: RawAxiosRequestConfig): AxiosPromise<LiveTokenModel>;
    /**
     *
     * @summary Unblock User View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    unblockUserViewPost(requestParameters: UserApiUnblockUserViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * ## Update current user fields:  The update occurs partially. You can only send the fields that have been changed. If some field should have a null value, then send a field with a null value.  Some fields are not available for updating, since they can only be accessed by a certain type of user.  ```     Example Request {             \"sex\": \"male\",             \"birthday\": \"2000-08-07\"     } ```
     * @summary Update Current User View
     * @param {UpdateCurrentUser} updateCurrentUser
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateCurrentUserViewPatch(requestParameters: UserApiUpdateCurrentUserViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserModelWithPhoto>;
    /**
     *
     * @summary Update Global Hide List View
     * @param {OpenHiddenLists} openHiddenLists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateGlobalHideListViewPatch(requestParameters: UserApiUpdateGlobalHideListViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Update Secret Keys View
     * @param {UserSecretKeyUpdateSchema} userSecretKeyUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateSecretKeysViewPatch(requestParameters: UserApiUpdateSecretKeysViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserSecretKey>;
    /**
     *
     * @summary Update User Settings View
     * @param {UpdateGlobalSettings} updateGlobalSettings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    updateUserSettingsViewPatch(requestParameters: UserApiUpdateUserSettingsViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserGlobalSettings>;
    /**
     *
     * @summary Verify User Pin View
     * @param {UserPinSchema} userPinSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApiInterface
     */
    verifyUserPinViewPost(requestParameters: UserApiVerifyUserPinViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
}
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export declare class UserApi extends BaseAPI implements UserApiInterface {
    /**
     *
     * @summary Block User View
     * @param {UserApiBlockUserViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    blockUserViewPost(requestParameters: UserApiBlockUserViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Delete User View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    deleteUserViewDelete(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - username: str
     * @summary Get Global Story Hidden List View
     * @param {UserApiGetGlobalStoryHiddenListViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getGlobalStoryHiddenListViewGet(requestParameters?: UserApiGetGlobalStoryHiddenListViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StoryHiddenList, any>>;
    /**
     *
     * @summary Get Self View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getSelfViewGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserMeSchema, any>>;
    /**
     *
     * @summary Get User Secret Keys View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserSecretKeysViewGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSecretKey, any>>;
    /**
     *
     * @summary Get User Settings View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserSettingsViewGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserGlobalSettings, any>>;
    /**
     *
     * @summary Get User View
     * @param {UserApiGetUserViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUserViewGet(requestParameters: UserApiGetUserViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserDetailWithFlags, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int - name: str - username: str
     * @summary List User View
     * @param {UserApiListUserViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    listUserViewGet(requestParameters?: UserApiListUserViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UsersWithFollowIndicators, any>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - followers_count: int - id: int  ## ?offset=\'last_score,last_followers_count,last_id\'  ## Example: &offset=\'32.2,1241,40\'
     * @summary Search Users View
     * @param {UserApiSearchUsersViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    searchUsersViewGet(requestParameters: UserApiSearchUsersViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSearchListSchema, any>>;
    /**
     *
     * @summary Set User Pin View
     * @param {UserApiSetUserPinViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    setUserPinViewPost(requestParameters: UserApiSetUserPinViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Start Live View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    startLiveViewGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LiveTokenModel, any>>;
    /**
     *
     * @summary Unblock User View
     * @param {UserApiUnblockUserViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    unblockUserViewPost(requestParameters: UserApiUnblockUserViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * ## Update current user fields:  The update occurs partially. You can only send the fields that have been changed. If some field should have a null value, then send a field with a null value.  Some fields are not available for updating, since they can only be accessed by a certain type of user.  ```     Example Request {             \"sex\": \"male\",             \"birthday\": \"2000-08-07\"     } ```
     * @summary Update Current User View
     * @param {UserApiUpdateCurrentUserViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateCurrentUserViewPatch(requestParameters: UserApiUpdateCurrentUserViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserModelWithPhoto, any>>;
    /**
     *
     * @summary Update Global Hide List View
     * @param {UserApiUpdateGlobalHideListViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateGlobalHideListViewPatch(requestParameters: UserApiUpdateGlobalHideListViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Update Secret Keys View
     * @param {UserApiUpdateSecretKeysViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateSecretKeysViewPatch(requestParameters: UserApiUpdateSecretKeysViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserSecretKey, any>>;
    /**
     *
     * @summary Update User Settings View
     * @param {UserApiUpdateUserSettingsViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    updateUserSettingsViewPatch(requestParameters: UserApiUpdateUserSettingsViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserGlobalSettings, any>>;
    /**
     *
     * @summary Verify User Pin View
     * @param {UserApiVerifyUserPinViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    verifyUserPinViewPost(requestParameters: UserApiVerifyUserPinViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
