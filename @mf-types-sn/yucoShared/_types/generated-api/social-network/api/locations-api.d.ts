/**
 * Yuco Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosConfiguration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { LocationDetailSchema } from '../model';
import type { LocationsListSchema } from '../model';
import type { LocationsSearchListSchema } from '../model';
/**
 * LocationsApi - axios parameter creator
 * @export
 */
export declare const LocationsApiAxiosParamCreator: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Get Location View
     * @param {number} locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocationViewGet: (locationId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Get Locations View
     * @param {string} query Query to find locations.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocationsViewGet: (query: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search Locations View
     * @param {string} query Query to find locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLocationsViewGet: (query: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * LocationsApi - functional programming interface
 * @export
 */
export declare const LocationsApiFp: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Get Location View
     * @param {number} locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocationViewGet(locationId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationDetailSchema>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Get Locations View
     * @param {string} query Query to find locations.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLocationsViewGet(query: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationsListSchema>>;
    /**
     *
     * @summary Search Locations View
     * @param {string} query Query to find locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchLocationsViewGet(query: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LocationsSearchListSchema>>;
};
/**
 * Request parameters for getLocationViewGet operation in LocationsApi.
 * @export
 * @interface LocationsApiGetLocationViewGetRequest
 */
export interface LocationsApiGetLocationViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof LocationsApiGetLocationViewGet
     */
    readonly locationId: number;
}
/**
 * Request parameters for getLocationsViewGet operation in LocationsApi.
 * @export
 * @interface LocationsApiGetLocationsViewGetRequest
 */
export interface LocationsApiGetLocationsViewGetRequest {
    /**
     * Query to find locations.
     * @type {string}
     * @memberof LocationsApiGetLocationsViewGet
     */
    readonly query: string;
    /**
     * Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @type {string}
     * @memberof LocationsApiGetLocationsViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof LocationsApiGetLocationsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for searchLocationsViewGet operation in LocationsApi.
 * @export
 * @interface LocationsApiSearchLocationsViewGetRequest
 */
export interface LocationsApiSearchLocationsViewGetRequest {
    /**
     * Query to find locations.
     * @type {string}
     * @memberof LocationsApiSearchLocationsViewGet
     */
    readonly query: string;
}
/**
 * LocationsApi - interface
 * @export
 * @interface LocationsApi
 */
export interface LocationsApiInterface {
    /**
     *
     * @summary Get Location View
     * @param {number} locationId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    getLocationViewGet(requestParameters: LocationsApiGetLocationViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationDetailSchema>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Get Locations View
     * @param {string} query Query to find locations.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    getLocationsViewGet(requestParameters: LocationsApiGetLocationsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationsListSchema>;
    /**
     *
     * @summary Search Locations View
     * @param {string} query Query to find locations.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApiInterface
     */
    searchLocationsViewGet(requestParameters: LocationsApiSearchLocationsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<LocationsSearchListSchema>;
}
/**
 * LocationsApi - object-oriented interface
 * @export
 * @class LocationsApi
 * @extends {BaseAPI}
 */
export declare class LocationsApi extends BaseAPI implements LocationsApiInterface {
    /**
     *
     * @summary Get Location View
     * @param {LocationsApiGetLocationViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    getLocationViewGet(requestParameters: LocationsApiGetLocationViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LocationDetailSchema, any>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Get Locations View
     * @param {LocationsApiGetLocationsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    getLocationsViewGet(requestParameters: LocationsApiGetLocationsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LocationsListSchema, any>>;
    /**
     *
     * @summary Search Locations View
     * @param {LocationsApiSearchLocationsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LocationsApi
     */
    searchLocationsViewGet(requestParameters: LocationsApiSearchLocationsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<LocationsSearchListSchema, any>>;
}
