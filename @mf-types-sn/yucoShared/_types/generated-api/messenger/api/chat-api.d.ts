/**
 * Yuco Messenger
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosConfiguration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { FriendlyRole } from '../model';
import type { MSAttachmentWithUrls } from '../model';
import type { MSChatBase } from '../model';
import type { MSChatList } from '../model';
import type { MSDirectoryList } from '../model';
import type { MSFullChat } from '../model';
import type { MSInvitation } from '../model';
import type { MSMute } from '../model';
import type { SJBAddChatsToFolder } from '../model';
import type { SJBAddMembers } from '../model';
import type { SJBCreateChat } from '../model';
import type { SJBLeaveChat } from '../model';
import type { SJBMute } from '../model';
import type { SJBRemoveChatsFromFolder } from '../model';
import type { SJBRemoveMembers } from '../model';
import type { SJBRenameFolder } from '../model';
import type { SJBUpdateChat } from '../model';
/**
 * ChatApi - axios parameter creator
 * @export
 */
export declare const ChatApiAxiosParamCreator: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Add Chats To Folder View
     * @param {SJBAddChatsToFolder} sJBAddChatsToFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addChatsToFolderViewPost: (sJBAddChatsToFolder: SJBAddChatsToFolder, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Add members to open chat group.  You must be a group member to perform this action.
     * @summary Add Members View
     * @param {string} chatUuid
     * @param {SJBAddMembers} sJBAddMembers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMembersViewPost: (chatUuid: string, sJBAddMembers: SJBAddMembers, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Change user role.
     * @summary Change Role View
     * @param {string} chatUuid
     * @param {string} accountUuid
     * @param {FriendlyRole} newRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeRoleViewPut: (chatUuid: string, accountUuid: string, newRole: FriendlyRole, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Chat Folders View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatFoldersViewGet: (options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Chat Lookup View
     * @param {string} query Query for search by name.
     * @param {string} [searchOffset] Search offset
     * @param {number} [limit] Limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatLookupViewGet: (query: string, searchOffset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Chat View
     * @param {SJBCreateChat} sJBCreateChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChatViewPost: (sJBCreateChat: SJBCreateChat, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Chat View
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChatViewDelete: (chatUuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Chat Contents View
     * @param {string} chatUuid
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [isFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatContentsViewGet: (chatUuid: string, offset?: number, limit?: number, isFile?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Chat
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatGet: (chatUuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Chat Links View
     * @param {string} chatUuid
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatLinksViewGet: (chatUuid: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Chats View
     * @param {number} [limit]
     * @param {boolean} [initCacheMessages]
     * @param {string} [offset]
     * @param {string} [inDir]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatsViewGet: (limit?: number, initCacheMessages?: boolean, offset?: string, inDir?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Get private group invitation link.  Access: all members.
     * @summary Get Invitation View
     * @param {string} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitationViewGet: (chatId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Members View
     * @param {string} chatId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembersViewGet: (chatId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Private Chat
     * @param {string} accountUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrivateChatGet: (accountUuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Leave open chat group.  You must be a group member to perform this action.
     * @summary Leave Chat View
     * @param {string} chatUuid
     * @param {SJBLeaveChat} sJBLeaveChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveChatViewPost: (chatUuid: string, sJBLeaveChat: SJBLeaveChat, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Mute chat Body:     type: [temporarily, period, forever]      period:         // temporarily: time delta in seconds         60          // period         {             \"since\": \"2023-10-20T05:46:55.948863\",  # can be a date in the past             \"till\": 2023-10-20T12:46:55.948863 # can\'t be in the past         }
     * @summary Mute View
     * @param {string} chatId
     * @param {SJBMute} sJBMute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteViewPut: (chatId: string, sJBMute: SJBMute, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Pin Chats View
     * @param {SJBAddChatsToFolder} sJBAddChatsToFolder
     * @param {boolean} [pin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinChatsViewPut: (sJBAddChatsToFolder: SJBAddChatsToFolder, pin?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Redeem invitation to access private chat group.
     * @summary Redeem Invitation View
     * @param {string} invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemInvitationViewPost: (invitation: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Regenerate private group invitation link.  Access: owner, admins.
     * @summary Regenerate Invitation View
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateInvitationViewPost: (chatUuid: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove Chats From Folder View
     * @param {SJBRemoveChatsFromFolder} sJBRemoveChatsFromFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeChatsFromFolderViewDelete: (sJBRemoveChatsFromFolder: SJBRemoveChatsFromFolder, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove Folder View
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFolderViewDelete: (name: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Remove members from open chat group.  You must be a group OWNER or ADMIN to perform this action.
     * @summary Remove Members View
     * @param {string} chatUuid
     * @param {SJBRemoveMembers} sJBRemoveMembers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMembersViewDelete: (chatUuid: string, sJBRemoveMembers: SJBRemoveMembers, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Rename Folder View
     * @param {SJBRenameFolder} sJBRenameFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameFolderViewPatch: (sJBRenameFolder: SJBRenameFolder, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Unmute View
     * @param {string} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteViewPut: (chatId: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Chat View
     * @param {string} chatUuid
     * @param {SJBUpdateChat} sJBUpdateChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateChatViewPatch: (chatUuid: string, sJBUpdateChat: SJBUpdateChat, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ChatApi - functional programming interface
 * @export
 */
export declare const ChatApiFp: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Add Chats To Folder View
     * @param {SJBAddChatsToFolder} sJBAddChatsToFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addChatsToFolderViewPost(sJBAddChatsToFolder: SJBAddChatsToFolder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Add members to open chat group.  You must be a group member to perform this action.
     * @summary Add Members View
     * @param {string} chatUuid
     * @param {SJBAddMembers} sJBAddMembers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addMembersViewPost(chatUuid: string, sJBAddMembers: SJBAddMembers, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Change user role.
     * @summary Change Role View
     * @param {string} chatUuid
     * @param {string} accountUuid
     * @param {FriendlyRole} newRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeRoleViewPut(chatUuid: string, accountUuid: string, newRole: FriendlyRole, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Chat Folders View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatFoldersViewGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSDirectoryList>>;
    /**
     *
     * @summary Chat Lookup View
     * @param {string} query Query for search by name.
     * @param {string} [searchOffset] Search offset
     * @param {number} [limit] Limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chatLookupViewGet(query: string, searchOffset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSChatList>>;
    /**
     *
     * @summary Create Chat View
     * @param {SJBCreateChat} sJBCreateChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChatViewPost(sJBCreateChat: SJBCreateChat, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSChatBase>>;
    /**
     *
     * @summary Delete Chat View
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteChatViewDelete(chatUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get Chat Contents View
     * @param {string} chatUuid
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [isFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatContentsViewGet(chatUuid: string, offset?: number, limit?: number, isFile?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MSAttachmentWithUrls>>>;
    /**
     *
     * @summary Get Chat
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatGet(chatUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSFullChat>>;
    /**
     *
     * @summary Get Chat Links View
     * @param {string} chatUuid
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatLinksViewGet(chatUuid: string, offset?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get Chats View
     * @param {number} [limit]
     * @param {boolean} [initCacheMessages]
     * @param {string} [offset]
     * @param {string} [inDir]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChatsViewGet(limit?: number, initCacheMessages?: boolean, offset?: string, inDir?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSChatList>>;
    /**
     * Get private group invitation link.  Access: all members.
     * @summary Get Invitation View
     * @param {string} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvitationViewGet(chatId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSInvitation>>;
    /**
     *
     * @summary Get Members View
     * @param {string} chatId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMembersViewGet(chatId: string, limit?: number, offset?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get Private Chat
     * @param {string} accountUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPrivateChatGet(accountUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSFullChat>>;
    /**
     * Leave open chat group.  You must be a group member to perform this action.
     * @summary Leave Chat View
     * @param {string} chatUuid
     * @param {SJBLeaveChat} sJBLeaveChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    leaveChatViewPost(chatUuid: string, sJBLeaveChat: SJBLeaveChat, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * Mute chat Body:     type: [temporarily, period, forever]      period:         // temporarily: time delta in seconds         60          // period         {             \"since\": \"2023-10-20T05:46:55.948863\",  # can be a date in the past             \"till\": 2023-10-20T12:46:55.948863 # can\'t be in the past         }
     * @summary Mute View
     * @param {string} chatId
     * @param {SJBMute} sJBMute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    muteViewPut(chatId: string, sJBMute: SJBMute, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSMute>>;
    /**
     *
     * @summary Pin Chats View
     * @param {SJBAddChatsToFolder} sJBAddChatsToFolder
     * @param {boolean} [pin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pinChatsViewPut(sJBAddChatsToFolder: SJBAddChatsToFolder, pin?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Redeem invitation to access private chat group.
     * @summary Redeem Invitation View
     * @param {string} invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    redeemInvitationViewPost(invitation: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSFullChat>>;
    /**
     * Regenerate private group invitation link.  Access: owner, admins.
     * @summary Regenerate Invitation View
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    regenerateInvitationViewPost(chatUuid: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSInvitation>>;
    /**
     *
     * @summary Remove Chats From Folder View
     * @param {SJBRemoveChatsFromFolder} sJBRemoveChatsFromFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeChatsFromFolderViewDelete(sJBRemoveChatsFromFolder: SJBRemoveChatsFromFolder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove Folder View
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeFolderViewDelete(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * Remove members from open chat group.  You must be a group OWNER or ADMIN to perform this action.
     * @summary Remove Members View
     * @param {string} chatUuid
     * @param {SJBRemoveMembers} sJBRemoveMembers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeMembersViewDelete(chatUuid: string, sJBRemoveMembers: SJBRemoveMembers, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Rename Folder View
     * @param {SJBRenameFolder} sJBRenameFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameFolderViewPatch(sJBRenameFolder: SJBRenameFolder, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Unmute View
     * @param {string} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unmuteViewPut(chatId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update Chat View
     * @param {string} chatUuid
     * @param {SJBUpdateChat} sJBUpdateChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateChatViewPatch(chatUuid: string, sJBUpdateChat: SJBUpdateChat, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MSFullChat>>;
};
/**
 * Request parameters for addChatsToFolderViewPost operation in ChatApi.
 * @export
 * @interface ChatApiAddChatsToFolderViewPostRequest
 */
export interface ChatApiAddChatsToFolderViewPostRequest {
    /**
     *
     * @type {SJBAddChatsToFolder}
     * @memberof ChatApiAddChatsToFolderViewPost
     */
    readonly sJBAddChatsToFolder: SJBAddChatsToFolder;
}
/**
 * Request parameters for addMembersViewPost operation in ChatApi.
 * @export
 * @interface ChatApiAddMembersViewPostRequest
 */
export interface ChatApiAddMembersViewPostRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiAddMembersViewPost
     */
    readonly chatUuid: string;
    /**
     *
     * @type {SJBAddMembers}
     * @memberof ChatApiAddMembersViewPost
     */
    readonly sJBAddMembers: SJBAddMembers;
}
/**
 * Request parameters for changeRoleViewPut operation in ChatApi.
 * @export
 * @interface ChatApiChangeRoleViewPutRequest
 */
export interface ChatApiChangeRoleViewPutRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiChangeRoleViewPut
     */
    readonly chatUuid: string;
    /**
     *
     * @type {string}
     * @memberof ChatApiChangeRoleViewPut
     */
    readonly accountUuid: string;
    /**
     *
     * @type {FriendlyRole}
     * @memberof ChatApiChangeRoleViewPut
     */
    readonly newRole: FriendlyRole;
}
/**
 * Request parameters for chatLookupViewGet operation in ChatApi.
 * @export
 * @interface ChatApiChatLookupViewGetRequest
 */
export interface ChatApiChatLookupViewGetRequest {
    /**
     * Query for search by name.
     * @type {string}
     * @memberof ChatApiChatLookupViewGet
     */
    readonly query: string;
    /**
     * Search offset
     * @type {string}
     * @memberof ChatApiChatLookupViewGet
     */
    readonly searchOffset?: string;
    /**
     * Limit
     * @type {number}
     * @memberof ChatApiChatLookupViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for createChatViewPost operation in ChatApi.
 * @export
 * @interface ChatApiCreateChatViewPostRequest
 */
export interface ChatApiCreateChatViewPostRequest {
    /**
     *
     * @type {SJBCreateChat}
     * @memberof ChatApiCreateChatViewPost
     */
    readonly sJBCreateChat: SJBCreateChat;
}
/**
 * Request parameters for deleteChatViewDelete operation in ChatApi.
 * @export
 * @interface ChatApiDeleteChatViewDeleteRequest
 */
export interface ChatApiDeleteChatViewDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiDeleteChatViewDelete
     */
    readonly chatUuid: string;
}
/**
 * Request parameters for getChatContentsViewGet operation in ChatApi.
 * @export
 * @interface ChatApiGetChatContentsViewGetRequest
 */
export interface ChatApiGetChatContentsViewGetRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiGetChatContentsViewGet
     */
    readonly chatUuid: string;
    /**
     *
     * @type {number}
     * @memberof ChatApiGetChatContentsViewGet
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof ChatApiGetChatContentsViewGet
     */
    readonly limit?: number;
    /**
     *
     * @type {boolean}
     * @memberof ChatApiGetChatContentsViewGet
     */
    readonly isFile?: boolean;
}
/**
 * Request parameters for getChatGet operation in ChatApi.
 * @export
 * @interface ChatApiGetChatGetRequest
 */
export interface ChatApiGetChatGetRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiGetChatGet
     */
    readonly chatUuid: string;
}
/**
 * Request parameters for getChatLinksViewGet operation in ChatApi.
 * @export
 * @interface ChatApiGetChatLinksViewGetRequest
 */
export interface ChatApiGetChatLinksViewGetRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiGetChatLinksViewGet
     */
    readonly chatUuid: string;
    /**
     *
     * @type {number}
     * @memberof ChatApiGetChatLinksViewGet
     */
    readonly offset?: number;
    /**
     *
     * @type {number}
     * @memberof ChatApiGetChatLinksViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for getChatsViewGet operation in ChatApi.
 * @export
 * @interface ChatApiGetChatsViewGetRequest
 */
export interface ChatApiGetChatsViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof ChatApiGetChatsViewGet
     */
    readonly limit?: number;
    /**
     *
     * @type {boolean}
     * @memberof ChatApiGetChatsViewGet
     */
    readonly initCacheMessages?: boolean;
    /**
     *
     * @type {string}
     * @memberof ChatApiGetChatsViewGet
     */
    readonly offset?: string;
    /**
     *
     * @type {string}
     * @memberof ChatApiGetChatsViewGet
     */
    readonly inDir?: string;
}
/**
 * Request parameters for getInvitationViewGet operation in ChatApi.
 * @export
 * @interface ChatApiGetInvitationViewGetRequest
 */
export interface ChatApiGetInvitationViewGetRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiGetInvitationViewGet
     */
    readonly chatId: string;
}
/**
 * Request parameters for getMembersViewGet operation in ChatApi.
 * @export
 * @interface ChatApiGetMembersViewGetRequest
 */
export interface ChatApiGetMembersViewGetRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiGetMembersViewGet
     */
    readonly chatId: string;
    /**
     *
     * @type {number}
     * @memberof ChatApiGetMembersViewGet
     */
    readonly limit?: number;
    /**
     *
     * @type {number}
     * @memberof ChatApiGetMembersViewGet
     */
    readonly offset?: number;
}
/**
 * Request parameters for getPrivateChatGet operation in ChatApi.
 * @export
 * @interface ChatApiGetPrivateChatGetRequest
 */
export interface ChatApiGetPrivateChatGetRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiGetPrivateChatGet
     */
    readonly accountUuid: string;
}
/**
 * Request parameters for leaveChatViewPost operation in ChatApi.
 * @export
 * @interface ChatApiLeaveChatViewPostRequest
 */
export interface ChatApiLeaveChatViewPostRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiLeaveChatViewPost
     */
    readonly chatUuid: string;
    /**
     *
     * @type {SJBLeaveChat}
     * @memberof ChatApiLeaveChatViewPost
     */
    readonly sJBLeaveChat: SJBLeaveChat;
}
/**
 * Request parameters for muteViewPut operation in ChatApi.
 * @export
 * @interface ChatApiMuteViewPutRequest
 */
export interface ChatApiMuteViewPutRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiMuteViewPut
     */
    readonly chatId: string;
    /**
     *
     * @type {SJBMute}
     * @memberof ChatApiMuteViewPut
     */
    readonly sJBMute: SJBMute;
}
/**
 * Request parameters for pinChatsViewPut operation in ChatApi.
 * @export
 * @interface ChatApiPinChatsViewPutRequest
 */
export interface ChatApiPinChatsViewPutRequest {
    /**
     *
     * @type {SJBAddChatsToFolder}
     * @memberof ChatApiPinChatsViewPut
     */
    readonly sJBAddChatsToFolder: SJBAddChatsToFolder;
    /**
     *
     * @type {boolean}
     * @memberof ChatApiPinChatsViewPut
     */
    readonly pin?: boolean;
}
/**
 * Request parameters for redeemInvitationViewPost operation in ChatApi.
 * @export
 * @interface ChatApiRedeemInvitationViewPostRequest
 */
export interface ChatApiRedeemInvitationViewPostRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiRedeemInvitationViewPost
     */
    readonly invitation: string;
}
/**
 * Request parameters for regenerateInvitationViewPost operation in ChatApi.
 * @export
 * @interface ChatApiRegenerateInvitationViewPostRequest
 */
export interface ChatApiRegenerateInvitationViewPostRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiRegenerateInvitationViewPost
     */
    readonly chatUuid: string;
}
/**
 * Request parameters for removeChatsFromFolderViewDelete operation in ChatApi.
 * @export
 * @interface ChatApiRemoveChatsFromFolderViewDeleteRequest
 */
export interface ChatApiRemoveChatsFromFolderViewDeleteRequest {
    /**
     *
     * @type {SJBRemoveChatsFromFolder}
     * @memberof ChatApiRemoveChatsFromFolderViewDelete
     */
    readonly sJBRemoveChatsFromFolder: SJBRemoveChatsFromFolder;
}
/**
 * Request parameters for removeFolderViewDelete operation in ChatApi.
 * @export
 * @interface ChatApiRemoveFolderViewDeleteRequest
 */
export interface ChatApiRemoveFolderViewDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiRemoveFolderViewDelete
     */
    readonly name: string;
}
/**
 * Request parameters for removeMembersViewDelete operation in ChatApi.
 * @export
 * @interface ChatApiRemoveMembersViewDeleteRequest
 */
export interface ChatApiRemoveMembersViewDeleteRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiRemoveMembersViewDelete
     */
    readonly chatUuid: string;
    /**
     *
     * @type {SJBRemoveMembers}
     * @memberof ChatApiRemoveMembersViewDelete
     */
    readonly sJBRemoveMembers: SJBRemoveMembers;
}
/**
 * Request parameters for renameFolderViewPatch operation in ChatApi.
 * @export
 * @interface ChatApiRenameFolderViewPatchRequest
 */
export interface ChatApiRenameFolderViewPatchRequest {
    /**
     *
     * @type {SJBRenameFolder}
     * @memberof ChatApiRenameFolderViewPatch
     */
    readonly sJBRenameFolder: SJBRenameFolder;
}
/**
 * Request parameters for unmuteViewPut operation in ChatApi.
 * @export
 * @interface ChatApiUnmuteViewPutRequest
 */
export interface ChatApiUnmuteViewPutRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiUnmuteViewPut
     */
    readonly chatId: string;
}
/**
 * Request parameters for updateChatViewPatch operation in ChatApi.
 * @export
 * @interface ChatApiUpdateChatViewPatchRequest
 */
export interface ChatApiUpdateChatViewPatchRequest {
    /**
     *
     * @type {string}
     * @memberof ChatApiUpdateChatViewPatch
     */
    readonly chatUuid: string;
    /**
     *
     * @type {SJBUpdateChat}
     * @memberof ChatApiUpdateChatViewPatch
     */
    readonly sJBUpdateChat: SJBUpdateChat;
}
/**
 * ChatApi - interface
 * @export
 * @interface ChatApi
 */
export interface ChatApiInterface {
    /**
     *
     * @summary Add Chats To Folder View
     * @param {SJBAddChatsToFolder} sJBAddChatsToFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    addChatsToFolderViewPost(requestParameters: ChatApiAddChatsToFolderViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Add members to open chat group.  You must be a group member to perform this action.
     * @summary Add Members View
     * @param {string} chatUuid
     * @param {SJBAddMembers} sJBAddMembers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    addMembersViewPost(requestParameters: ChatApiAddMembersViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Change user role.
     * @summary Change Role View
     * @param {string} chatUuid
     * @param {string} accountUuid
     * @param {FriendlyRole} newRole
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    changeRoleViewPut(requestParameters: ChatApiChangeRoleViewPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Chat Folders View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    chatFoldersViewGet(options?: RawAxiosRequestConfig): AxiosPromise<MSDirectoryList>;
    /**
     *
     * @summary Chat Lookup View
     * @param {string} query Query for search by name.
     * @param {string} [searchOffset] Search offset
     * @param {number} [limit] Limit
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    chatLookupViewGet(requestParameters: ChatApiChatLookupViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSChatList>;
    /**
     *
     * @summary Create Chat View
     * @param {SJBCreateChat} sJBCreateChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    createChatViewPost(requestParameters: ChatApiCreateChatViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSChatBase>;
    /**
     *
     * @summary Delete Chat View
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    deleteChatViewDelete(requestParameters: ChatApiDeleteChatViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get Chat Contents View
     * @param {string} chatUuid
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [isFile]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getChatContentsViewGet(requestParameters: ChatApiGetChatContentsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<MSAttachmentWithUrls>>;
    /**
     *
     * @summary Get Chat
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getChatGet(requestParameters: ChatApiGetChatGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSFullChat>;
    /**
     *
     * @summary Get Chat Links View
     * @param {string} chatUuid
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getChatLinksViewGet(requestParameters: ChatApiGetChatLinksViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Get Chats View
     * @param {number} [limit]
     * @param {boolean} [initCacheMessages]
     * @param {string} [offset]
     * @param {string} [inDir]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getChatsViewGet(requestParameters: ChatApiGetChatsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSChatList>;
    /**
     * Get private group invitation link.  Access: all members.
     * @summary Get Invitation View
     * @param {string} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getInvitationViewGet(requestParameters: ChatApiGetInvitationViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSInvitation>;
    /**
     *
     * @summary Get Members View
     * @param {string} chatId
     * @param {number} [limit]
     * @param {number} [offset]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getMembersViewGet(requestParameters: ChatApiGetMembersViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Get Private Chat
     * @param {string} accountUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    getPrivateChatGet(requestParameters: ChatApiGetPrivateChatGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSFullChat>;
    /**
     * Leave open chat group.  You must be a group member to perform this action.
     * @summary Leave Chat View
     * @param {string} chatUuid
     * @param {SJBLeaveChat} sJBLeaveChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    leaveChatViewPost(requestParameters: ChatApiLeaveChatViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     * Mute chat Body:     type: [temporarily, period, forever]      period:         // temporarily: time delta in seconds         60          // period         {             \"since\": \"2023-10-20T05:46:55.948863\",  # can be a date in the past             \"till\": 2023-10-20T12:46:55.948863 # can\'t be in the past         }
     * @summary Mute View
     * @param {string} chatId
     * @param {SJBMute} sJBMute
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    muteViewPut(requestParameters: ChatApiMuteViewPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSMute>;
    /**
     *
     * @summary Pin Chats View
     * @param {SJBAddChatsToFolder} sJBAddChatsToFolder
     * @param {boolean} [pin]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    pinChatsViewPut(requestParameters: ChatApiPinChatsViewPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Redeem invitation to access private chat group.
     * @summary Redeem Invitation View
     * @param {string} invitation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    redeemInvitationViewPost(requestParameters: ChatApiRedeemInvitationViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSFullChat>;
    /**
     * Regenerate private group invitation link.  Access: owner, admins.
     * @summary Regenerate Invitation View
     * @param {string} chatUuid
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    regenerateInvitationViewPost(requestParameters: ChatApiRegenerateInvitationViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSInvitation>;
    /**
     *
     * @summary Remove Chats From Folder View
     * @param {SJBRemoveChatsFromFolder} sJBRemoveChatsFromFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    removeChatsFromFolderViewDelete(requestParameters: ChatApiRemoveChatsFromFolderViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Remove Folder View
     * @param {string} name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    removeFolderViewDelete(requestParameters: ChatApiRemoveFolderViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * Remove members from open chat group.  You must be a group OWNER or ADMIN to perform this action.
     * @summary Remove Members View
     * @param {string} chatUuid
     * @param {SJBRemoveMembers} sJBRemoveMembers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    removeMembersViewDelete(requestParameters: ChatApiRemoveMembersViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Rename Folder View
     * @param {SJBRenameFolder} sJBRenameFolder
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    renameFolderViewPatch(requestParameters: ChatApiRenameFolderViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Unmute View
     * @param {string} chatId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    unmuteViewPut(requestParameters: ChatApiUnmuteViewPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update Chat View
     * @param {string} chatUuid
     * @param {SJBUpdateChat} sJBUpdateChat
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApiInterface
     */
    updateChatViewPatch(requestParameters: ChatApiUpdateChatViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<MSFullChat>;
}
/**
 * ChatApi - object-oriented interface
 * @export
 * @class ChatApi
 * @extends {BaseAPI}
 */
export declare class ChatApi extends BaseAPI implements ChatApiInterface {
    /**
     *
     * @summary Add Chats To Folder View
     * @param {ChatApiAddChatsToFolderViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    addChatsToFolderViewPost(requestParameters: ChatApiAddChatsToFolderViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Add members to open chat group.  You must be a group member to perform this action.
     * @summary Add Members View
     * @param {ChatApiAddMembersViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    addMembersViewPost(requestParameters: ChatApiAddMembersViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Change user role.
     * @summary Change Role View
     * @param {ChatApiChangeRoleViewPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    changeRoleViewPut(requestParameters: ChatApiChangeRoleViewPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Chat Folders View
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    chatFoldersViewGet(options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSDirectoryList, any>>;
    /**
     *
     * @summary Chat Lookup View
     * @param {ChatApiChatLookupViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    chatLookupViewGet(requestParameters: ChatApiChatLookupViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSChatList, any>>;
    /**
     *
     * @summary Create Chat View
     * @param {ChatApiCreateChatViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    createChatViewPost(requestParameters: ChatApiCreateChatViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSChatBase, any>>;
    /**
     *
     * @summary Delete Chat View
     * @param {ChatApiDeleteChatViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    deleteChatViewDelete(requestParameters: ChatApiDeleteChatViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get Chat Contents View
     * @param {ChatApiGetChatContentsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getChatContentsViewGet(requestParameters: ChatApiGetChatContentsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSAttachmentWithUrls[], any>>;
    /**
     *
     * @summary Get Chat
     * @param {ChatApiGetChatGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getChatGet(requestParameters: ChatApiGetChatGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSFullChat, any>>;
    /**
     *
     * @summary Get Chat Links View
     * @param {ChatApiGetChatLinksViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getChatLinksViewGet(requestParameters: ChatApiGetChatLinksViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get Chats View
     * @param {ChatApiGetChatsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getChatsViewGet(requestParameters?: ChatApiGetChatsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSChatList, any>>;
    /**
     * Get private group invitation link.  Access: all members.
     * @summary Get Invitation View
     * @param {ChatApiGetInvitationViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getInvitationViewGet(requestParameters: ChatApiGetInvitationViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSInvitation, any>>;
    /**
     *
     * @summary Get Members View
     * @param {ChatApiGetMembersViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getMembersViewGet(requestParameters: ChatApiGetMembersViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get Private Chat
     * @param {ChatApiGetPrivateChatGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    getPrivateChatGet(requestParameters: ChatApiGetPrivateChatGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSFullChat, any>>;
    /**
     * Leave open chat group.  You must be a group member to perform this action.
     * @summary Leave Chat View
     * @param {ChatApiLeaveChatViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    leaveChatViewPost(requestParameters: ChatApiLeaveChatViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     * Mute chat Body:     type: [temporarily, period, forever]      period:         // temporarily: time delta in seconds         60          // period         {             \"since\": \"2023-10-20T05:46:55.948863\",  # can be a date in the past             \"till\": 2023-10-20T12:46:55.948863 # can\'t be in the past         }
     * @summary Mute View
     * @param {ChatApiMuteViewPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    muteViewPut(requestParameters: ChatApiMuteViewPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSMute, any>>;
    /**
     *
     * @summary Pin Chats View
     * @param {ChatApiPinChatsViewPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    pinChatsViewPut(requestParameters: ChatApiPinChatsViewPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Redeem invitation to access private chat group.
     * @summary Redeem Invitation View
     * @param {ChatApiRedeemInvitationViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    redeemInvitationViewPost(requestParameters: ChatApiRedeemInvitationViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSFullChat, any>>;
    /**
     * Regenerate private group invitation link.  Access: owner, admins.
     * @summary Regenerate Invitation View
     * @param {ChatApiRegenerateInvitationViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    regenerateInvitationViewPost(requestParameters: ChatApiRegenerateInvitationViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSInvitation, any>>;
    /**
     *
     * @summary Remove Chats From Folder View
     * @param {ChatApiRemoveChatsFromFolderViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    removeChatsFromFolderViewDelete(requestParameters: ChatApiRemoveChatsFromFolderViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove Folder View
     * @param {ChatApiRemoveFolderViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    removeFolderViewDelete(requestParameters: ChatApiRemoveFolderViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * Remove members from open chat group.  You must be a group OWNER or ADMIN to perform this action.
     * @summary Remove Members View
     * @param {ChatApiRemoveMembersViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    removeMembersViewDelete(requestParameters: ChatApiRemoveMembersViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Rename Folder View
     * @param {ChatApiRenameFolderViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    renameFolderViewPatch(requestParameters: ChatApiRenameFolderViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Unmute View
     * @param {ChatApiUnmuteViewPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    unmuteViewPut(requestParameters: ChatApiUnmuteViewPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update Chat View
     * @param {ChatApiUpdateChatViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ChatApi
     */
    updateChatViewPatch(requestParameters: ChatApiUpdateChatViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<MSFullChat, any>>;
}
