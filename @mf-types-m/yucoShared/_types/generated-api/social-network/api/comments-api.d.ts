/**
 * Yuco Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosConfiguration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { CommentCreateSchema } from '../model';
import type { CommentDetailSchema } from '../model';
import type { CommentListSchema } from '../model';
import type { CommentUpdateSchema } from '../model';
/**
 * CommentsApi - axios parameter creator
 * @export
 */
export declare const CommentsApiAxiosParamCreator: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Create Comment View
     * @param {number} postId
     * @param {CommentCreateSchema} commentCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommentViewPost: (postId: number, commentCreateSchema: CommentCreateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Comment View
     * @param {number} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommentViewDelete: (commentId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Post Comments View
     * @param {number} postId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostCommentsViewGet: (postId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Reply Comments View
     * @param {number} commentId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReplyCommentsViewGet: (commentId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Comment View
     * @param {number} commentId
     * @param {CommentUpdateSchema} commentUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCommentViewPatch: (commentId: number, commentUpdateSchema: CommentUpdateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CommentsApi - functional programming interface
 * @export
 */
export declare const CommentsApiFp: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Create Comment View
     * @param {number} postId
     * @param {CommentCreateSchema} commentCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCommentViewPost(postId: number, commentCreateSchema: CommentCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentDetailSchema>>;
    /**
     *
     * @summary Delete Comment View
     * @param {number} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCommentViewDelete(commentId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Post Comments View
     * @param {number} postId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostCommentsViewGet(postId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentListSchema>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Reply Comments View
     * @param {number} commentId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getReplyCommentsViewGet(commentId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentListSchema>>;
    /**
     *
     * @summary Update Comment View
     * @param {number} commentId
     * @param {CommentUpdateSchema} commentUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateCommentViewPatch(commentId: number, commentUpdateSchema: CommentUpdateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentDetailSchema>>;
};
/**
 * Request parameters for createCommentViewPost operation in CommentsApi.
 * @export
 * @interface CommentsApiCreateCommentViewPostRequest
 */
export interface CommentsApiCreateCommentViewPostRequest {
    /**
     *
     * @type {number}
     * @memberof CommentsApiCreateCommentViewPost
     */
    readonly postId: number;
    /**
     *
     * @type {CommentCreateSchema}
     * @memberof CommentsApiCreateCommentViewPost
     */
    readonly commentCreateSchema: CommentCreateSchema;
}
/**
 * Request parameters for deleteCommentViewDelete operation in CommentsApi.
 * @export
 * @interface CommentsApiDeleteCommentViewDeleteRequest
 */
export interface CommentsApiDeleteCommentViewDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof CommentsApiDeleteCommentViewDelete
     */
    readonly commentId: number;
}
/**
 * Request parameters for getPostCommentsViewGet operation in CommentsApi.
 * @export
 * @interface CommentsApiGetPostCommentsViewGetRequest
 */
export interface CommentsApiGetPostCommentsViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof CommentsApiGetPostCommentsViewGet
     */
    readonly postId: number;
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof CommentsApiGetPostCommentsViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof CommentsApiGetPostCommentsViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof CommentsApiGetPostCommentsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for getReplyCommentsViewGet operation in CommentsApi.
 * @export
 * @interface CommentsApiGetReplyCommentsViewGetRequest
 */
export interface CommentsApiGetReplyCommentsViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof CommentsApiGetReplyCommentsViewGet
     */
    readonly commentId: number;
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof CommentsApiGetReplyCommentsViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof CommentsApiGetReplyCommentsViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof CommentsApiGetReplyCommentsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for updateCommentViewPatch operation in CommentsApi.
 * @export
 * @interface CommentsApiUpdateCommentViewPatchRequest
 */
export interface CommentsApiUpdateCommentViewPatchRequest {
    /**
     *
     * @type {number}
     * @memberof CommentsApiUpdateCommentViewPatch
     */
    readonly commentId: number;
    /**
     *
     * @type {CommentUpdateSchema}
     * @memberof CommentsApiUpdateCommentViewPatch
     */
    readonly commentUpdateSchema: CommentUpdateSchema;
}
/**
 * CommentsApi - interface
 * @export
 * @interface CommentsApi
 */
export interface CommentsApiInterface {
    /**
     *
     * @summary Create Comment View
     * @param {number} postId
     * @param {CommentCreateSchema} commentCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    createCommentViewPost(requestParameters: CommentsApiCreateCommentViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentDetailSchema>;
    /**
     *
     * @summary Delete Comment View
     * @param {number} commentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    deleteCommentViewDelete(requestParameters: CommentsApiDeleteCommentViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Post Comments View
     * @param {number} postId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    getPostCommentsViewGet(requestParameters: CommentsApiGetPostCommentsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentListSchema>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Reply Comments View
     * @param {number} commentId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    getReplyCommentsViewGet(requestParameters: CommentsApiGetReplyCommentsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentListSchema>;
    /**
     *
     * @summary Update Comment View
     * @param {number} commentId
     * @param {CommentUpdateSchema} commentUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApiInterface
     */
    updateCommentViewPatch(requestParameters: CommentsApiUpdateCommentViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<CommentDetailSchema>;
}
/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export declare class CommentsApi extends BaseAPI implements CommentsApiInterface {
    /**
     *
     * @summary Create Comment View
     * @param {CommentsApiCreateCommentViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    createCommentViewPost(requestParameters: CommentsApiCreateCommentViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommentDetailSchema, any>>;
    /**
     *
     * @summary Delete Comment View
     * @param {CommentsApiDeleteCommentViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    deleteCommentViewDelete(requestParameters: CommentsApiDeleteCommentViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Post Comments View
     * @param {CommentsApiGetPostCommentsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    getPostCommentsViewGet(requestParameters: CommentsApiGetPostCommentsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommentListSchema, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Reply Comments View
     * @param {CommentsApiGetReplyCommentsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    getReplyCommentsViewGet(requestParameters: CommentsApiGetReplyCommentsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommentListSchema, any>>;
    /**
     *
     * @summary Update Comment View
     * @param {CommentsApiUpdateCommentViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    updateCommentViewPatch(requestParameters: CommentsApiUpdateCommentViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<CommentDetailSchema, any>>;
}
