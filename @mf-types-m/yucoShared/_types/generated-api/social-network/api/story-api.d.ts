/**
 * Yuco Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosConfiguration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ActualStoriesList } from '../model';
import type { HighlightCreateSchema } from '../model';
import type { HighlightDetailSchema } from '../model';
import type { HighlightUpdateSchema } from '../model';
import type { ReplyPermissionDict } from '../model';
import type { ResponseInfo } from '../model';
import type { SJBGetStory } from '../model';
import type { Story } from '../model';
import type { StoryCreateSchema } from '../model';
import type { StoryHiddenList } from '../model';
import type { StoryHighlightListSchemaWithAvatar } from '../model';
import type { StoryListSchema } from '../model';
import type { StoryModelSchemaDetail } from '../model';
import type { StoryToHighlightSchema } from '../model';
import type { StoryUpdateSchema } from '../model';
import type { StoryViewListSchema } from '../model';
import type { StoryViewSchema } from '../model';
import type { UserStoryFeedList } from '../model';
/**
 * StoryApi - axios parameter creator
 * @export
 */
export declare const StoryApiAxiosParamCreator: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Add Story To Highlight View
     * @param {StoryToHighlightSchema} storyToHighlightSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoryToHighlightViewPost: (storyToHighlightSchema: StoryToHighlightSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Highlight View
     * @param {HighlightCreateSchema} highlightCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHighlightViewPost: (highlightCreateSchema: HighlightCreateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Story View
     * @param {StoryCreateSchema} storyCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStoryViewPost: (storyCreateSchema: StoryCreateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Highlight View
     * @param {number} highlightId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHighlightViewDelete: (highlightId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoryViewDelete: (storyId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Actual Stories View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActualStoriesViewGet: (userId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Highilight Stories View
     * @param {number} highlightId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHighilightStoriesViewGet: (highlightId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Highlights View
     * @param {number} userId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHighlightsViewGet: (userId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - last_story_created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'
     * @summary Get Stories Feed View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {boolean} [viewed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoriesFeedViewGet: (sort?: string, offset?: string, limit?: number, viewed?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  id: int created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'  The defaul sorting is \'-created_at\'.
     * @summary Get Stories View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {boolean} [archive] Stories from archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoriesViewGet: (sort?: string, offset?: string, limit?: number, archive?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - username: str
     * @summary Get Story Hidden List View
     * @param {number} storyId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoryHiddenListViewGet: (storyId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Story Reply Permission View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoryReplyPermissionViewGet: (storyId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoryViewGet: (storyId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  id: int created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'  The defaul sorting is \'-id\'.
     * @summary Get Story Views View
     * @param {number} storyId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoryViewsViewGet: (storyId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove Story From Highlight View
     * @param {number} [storyId] Id of story
     * @param {number} [highlightId] Id of highlight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeStoryFromHighlightViewDelete: (storyId?: number, highlightId?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Highlight View
     * @param {number} highlightId
     * @param {HighlightUpdateSchema} highlightUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHighlightViewPatch: (highlightId: number, highlightUpdateSchema: HighlightUpdateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Story View
     * @param {number} storyId
     * @param {StoryUpdateSchema} storyUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStoryViewPatch: (storyId: number, storyUpdateSchema: StoryUpdateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary View Story View
     * @param {number} userId
     * @param {StoryViewSchema} storyViewSchema
     * @param {boolean} [viewAll] View all actual stories of user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewStoryViewPost: (userId: number, storyViewSchema: StoryViewSchema, viewAll?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * StoryApi - functional programming interface
 * @export
 */
export declare const StoryApiFp: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Add Story To Highlight View
     * @param {StoryToHighlightSchema} storyToHighlightSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addStoryToHighlightViewPost(storyToHighlightSchema: StoryToHighlightSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseInfo>>;
    /**
     *
     * @summary Create Highlight View
     * @param {HighlightCreateSchema} highlightCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createHighlightViewPost(highlightCreateSchema: HighlightCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HighlightDetailSchema>>;
    /**
     *
     * @summary Create Story View
     * @param {StoryCreateSchema} storyCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createStoryViewPost(storyCreateSchema: StoryCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryModelSchemaDetail>>;
    /**
     *
     * @summary Delete Highlight View
     * @param {number} highlightId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteHighlightViewDelete(highlightId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseInfo>>;
    /**
     *
     * @summary Delete Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteStoryViewDelete(storyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResponseInfo>>;
    /**
     *
     * @summary Get Actual Stories View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActualStoriesViewGet(userId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ActualStoriesList>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Highilight Stories View
     * @param {number} highlightId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHighilightStoriesViewGet(highlightId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryListSchema>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Highlights View
     * @param {number} userId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHighlightsViewGet(userId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryHighlightListSchemaWithAvatar>>;
    /**
     * ## Available fields for *sort* and *offset*:  - last_story_created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'
     * @summary Get Stories Feed View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {boolean} [viewed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoriesFeedViewGet(sort?: string, offset?: string, limit?: number, viewed?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserStoryFeedList>>;
    /**
     * ## Available fields for *sort* and *offset*:  id: int created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'  The defaul sorting is \'-created_at\'.
     * @summary Get Stories View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {boolean} [archive] Stories from archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoriesViewGet(sort?: string, offset?: string, limit?: number, archive?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryListSchema>>;
    /**
     * ## Available fields for *sort* and *offset*:  - username: str
     * @summary Get Story Hidden List View
     * @param {number} storyId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoryHiddenListViewGet(storyId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryHiddenList>>;
    /**
     *
     * @summary Get Story Reply Permission View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoryReplyPermissionViewGet(storyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReplyPermissionDict>>;
    /**
     *
     * @summary Get Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoryViewGet(storyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SJBGetStory>>;
    /**
     * ## Available fields for *sort* and *offset*:  id: int created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'  The defaul sorting is \'-id\'.
     * @summary Get Story Views View
     * @param {number} storyId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getStoryViewsViewGet(storyId: number, sort?: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StoryViewListSchema>>;
    /**
     *
     * @summary Remove Story From Highlight View
     * @param {number} [storyId] Id of story
     * @param {number} [highlightId] Id of highlight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeStoryFromHighlightViewDelete(storyId?: number, highlightId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Update Highlight View
     * @param {number} highlightId
     * @param {HighlightUpdateSchema} highlightUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateHighlightViewPatch(highlightId: number, highlightUpdateSchema: HighlightUpdateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HighlightDetailSchema>>;
    /**
     *
     * @summary Update Story View
     * @param {number} storyId
     * @param {StoryUpdateSchema} storyUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStoryViewPatch(storyId: number, storyUpdateSchema: StoryUpdateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Story>>;
    /**
     *
     * @summary View Story View
     * @param {number} userId
     * @param {StoryViewSchema} storyViewSchema
     * @param {boolean} [viewAll] View all actual stories of user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    viewStoryViewPost(userId: number, storyViewSchema: StoryViewSchema, viewAll?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * Request parameters for addStoryToHighlightViewPost operation in StoryApi.
 * @export
 * @interface StoryApiAddStoryToHighlightViewPostRequest
 */
export interface StoryApiAddStoryToHighlightViewPostRequest {
    /**
     *
     * @type {StoryToHighlightSchema}
     * @memberof StoryApiAddStoryToHighlightViewPost
     */
    readonly storyToHighlightSchema: StoryToHighlightSchema;
}
/**
 * Request parameters for createHighlightViewPost operation in StoryApi.
 * @export
 * @interface StoryApiCreateHighlightViewPostRequest
 */
export interface StoryApiCreateHighlightViewPostRequest {
    /**
     *
     * @type {HighlightCreateSchema}
     * @memberof StoryApiCreateHighlightViewPost
     */
    readonly highlightCreateSchema: HighlightCreateSchema;
}
/**
 * Request parameters for createStoryViewPost operation in StoryApi.
 * @export
 * @interface StoryApiCreateStoryViewPostRequest
 */
export interface StoryApiCreateStoryViewPostRequest {
    /**
     *
     * @type {StoryCreateSchema}
     * @memberof StoryApiCreateStoryViewPost
     */
    readonly storyCreateSchema: StoryCreateSchema;
}
/**
 * Request parameters for deleteHighlightViewDelete operation in StoryApi.
 * @export
 * @interface StoryApiDeleteHighlightViewDeleteRequest
 */
export interface StoryApiDeleteHighlightViewDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiDeleteHighlightViewDelete
     */
    readonly highlightId: number;
}
/**
 * Request parameters for deleteStoryViewDelete operation in StoryApi.
 * @export
 * @interface StoryApiDeleteStoryViewDeleteRequest
 */
export interface StoryApiDeleteStoryViewDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiDeleteStoryViewDelete
     */
    readonly storyId: number;
}
/**
 * Request parameters for getActualStoriesViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetActualStoriesViewGetRequest
 */
export interface StoryApiGetActualStoriesViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiGetActualStoriesViewGet
     */
    readonly userId: number;
}
/**
 * Request parameters for getHighilightStoriesViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetHighilightStoriesViewGetRequest
 */
export interface StoryApiGetHighilightStoriesViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiGetHighilightStoriesViewGet
     */
    readonly highlightId: number;
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof StoryApiGetHighilightStoriesViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof StoryApiGetHighilightStoriesViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof StoryApiGetHighilightStoriesViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for getHighlightsViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetHighlightsViewGetRequest
 */
export interface StoryApiGetHighlightsViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiGetHighlightsViewGet
     */
    readonly userId: number;
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof StoryApiGetHighlightsViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof StoryApiGetHighlightsViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof StoryApiGetHighlightsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for getStoriesFeedViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetStoriesFeedViewGetRequest
 */
export interface StoryApiGetStoriesFeedViewGetRequest {
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof StoryApiGetStoriesFeedViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof StoryApiGetStoriesFeedViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof StoryApiGetStoriesFeedViewGet
     */
    readonly limit?: number;
    /**
     *
     * @type {boolean}
     * @memberof StoryApiGetStoriesFeedViewGet
     */
    readonly viewed?: boolean;
}
/**
 * Request parameters for getStoriesViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetStoriesViewGetRequest
 */
export interface StoryApiGetStoriesViewGetRequest {
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof StoryApiGetStoriesViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof StoryApiGetStoriesViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof StoryApiGetStoriesViewGet
     */
    readonly limit?: number;
    /**
     * Stories from archive.
     * @type {boolean}
     * @memberof StoryApiGetStoriesViewGet
     */
    readonly archive?: boolean;
}
/**
 * Request parameters for getStoryHiddenListViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetStoryHiddenListViewGetRequest
 */
export interface StoryApiGetStoryHiddenListViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiGetStoryHiddenListViewGet
     */
    readonly storyId: number;
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof StoryApiGetStoryHiddenListViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof StoryApiGetStoryHiddenListViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof StoryApiGetStoryHiddenListViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for getStoryReplyPermissionViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetStoryReplyPermissionViewGetRequest
 */
export interface StoryApiGetStoryReplyPermissionViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiGetStoryReplyPermissionViewGet
     */
    readonly storyId: number;
}
/**
 * Request parameters for getStoryViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetStoryViewGetRequest
 */
export interface StoryApiGetStoryViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiGetStoryViewGet
     */
    readonly storyId: number;
}
/**
 * Request parameters for getStoryViewsViewGet operation in StoryApi.
 * @export
 * @interface StoryApiGetStoryViewsViewGetRequest
 */
export interface StoryApiGetStoryViewsViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiGetStoryViewsViewGet
     */
    readonly storyId: number;
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof StoryApiGetStoryViewsViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof StoryApiGetStoryViewsViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof StoryApiGetStoryViewsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for removeStoryFromHighlightViewDelete operation in StoryApi.
 * @export
 * @interface StoryApiRemoveStoryFromHighlightViewDeleteRequest
 */
export interface StoryApiRemoveStoryFromHighlightViewDeleteRequest {
    /**
     * Id of story
     * @type {number}
     * @memberof StoryApiRemoveStoryFromHighlightViewDelete
     */
    readonly storyId?: number;
    /**
     * Id of highlight
     * @type {number}
     * @memberof StoryApiRemoveStoryFromHighlightViewDelete
     */
    readonly highlightId?: number;
}
/**
 * Request parameters for updateHighlightViewPatch operation in StoryApi.
 * @export
 * @interface StoryApiUpdateHighlightViewPatchRequest
 */
export interface StoryApiUpdateHighlightViewPatchRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiUpdateHighlightViewPatch
     */
    readonly highlightId: number;
    /**
     *
     * @type {HighlightUpdateSchema}
     * @memberof StoryApiUpdateHighlightViewPatch
     */
    readonly highlightUpdateSchema: HighlightUpdateSchema;
}
/**
 * Request parameters for updateStoryViewPatch operation in StoryApi.
 * @export
 * @interface StoryApiUpdateStoryViewPatchRequest
 */
export interface StoryApiUpdateStoryViewPatchRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiUpdateStoryViewPatch
     */
    readonly storyId: number;
    /**
     *
     * @type {StoryUpdateSchema}
     * @memberof StoryApiUpdateStoryViewPatch
     */
    readonly storyUpdateSchema: StoryUpdateSchema;
}
/**
 * Request parameters for viewStoryViewPost operation in StoryApi.
 * @export
 * @interface StoryApiViewStoryViewPostRequest
 */
export interface StoryApiViewStoryViewPostRequest {
    /**
     *
     * @type {number}
     * @memberof StoryApiViewStoryViewPost
     */
    readonly userId: number;
    /**
     *
     * @type {StoryViewSchema}
     * @memberof StoryApiViewStoryViewPost
     */
    readonly storyViewSchema: StoryViewSchema;
    /**
     * View all actual stories of user.
     * @type {boolean}
     * @memberof StoryApiViewStoryViewPost
     */
    readonly viewAll?: boolean;
}
/**
 * StoryApi - interface
 * @export
 * @interface StoryApi
 */
export interface StoryApiInterface {
    /**
     *
     * @summary Add Story To Highlight View
     * @param {StoryToHighlightSchema} storyToHighlightSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    addStoryToHighlightViewPost(requestParameters: StoryApiAddStoryToHighlightViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseInfo>;
    /**
     *
     * @summary Create Highlight View
     * @param {HighlightCreateSchema} highlightCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    createHighlightViewPost(requestParameters: StoryApiCreateHighlightViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<HighlightDetailSchema>;
    /**
     *
     * @summary Create Story View
     * @param {StoryCreateSchema} storyCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    createStoryViewPost(requestParameters: StoryApiCreateStoryViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<StoryModelSchemaDetail>;
    /**
     *
     * @summary Delete Highlight View
     * @param {number} highlightId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    deleteHighlightViewDelete(requestParameters: StoryApiDeleteHighlightViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseInfo>;
    /**
     *
     * @summary Delete Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    deleteStoryViewDelete(requestParameters: StoryApiDeleteStoryViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<ResponseInfo>;
    /**
     *
     * @summary Get Actual Stories View
     * @param {number} userId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getActualStoriesViewGet(requestParameters: StoryApiGetActualStoriesViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ActualStoriesList>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Highilight Stories View
     * @param {number} highlightId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getHighilightStoriesViewGet(requestParameters: StoryApiGetHighilightStoriesViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StoryListSchema>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Highlights View
     * @param {number} userId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getHighlightsViewGet(requestParameters: StoryApiGetHighlightsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StoryHighlightListSchemaWithAvatar>;
    /**
     * ## Available fields for *sort* and *offset*:  - last_story_created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'
     * @summary Get Stories Feed View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {boolean} [viewed]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getStoriesFeedViewGet(requestParameters: StoryApiGetStoriesFeedViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserStoryFeedList>;
    /**
     * ## Available fields for *sort* and *offset*:  id: int created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'  The defaul sorting is \'-created_at\'.
     * @summary Get Stories View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {boolean} [archive] Stories from archive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getStoriesViewGet(requestParameters: StoryApiGetStoriesViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StoryListSchema>;
    /**
     * ## Available fields for *sort* and *offset*:  - username: str
     * @summary Get Story Hidden List View
     * @param {number} storyId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getStoryHiddenListViewGet(requestParameters: StoryApiGetStoryHiddenListViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StoryHiddenList>;
    /**
     *
     * @summary Get Story Reply Permission View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getStoryReplyPermissionViewGet(requestParameters: StoryApiGetStoryReplyPermissionViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ReplyPermissionDict>;
    /**
     *
     * @summary Get Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getStoryViewGet(requestParameters: StoryApiGetStoryViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<SJBGetStory>;
    /**
     * ## Available fields for *sort* and *offset*:  id: int created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'  The defaul sorting is \'-id\'.
     * @summary Get Story Views View
     * @param {number} storyId
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    getStoryViewsViewGet(requestParameters: StoryApiGetStoryViewsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<StoryViewListSchema>;
    /**
     *
     * @summary Remove Story From Highlight View
     * @param {number} [storyId] Id of story
     * @param {number} [highlightId] Id of highlight
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    removeStoryFromHighlightViewDelete(requestParameters: StoryApiRemoveStoryFromHighlightViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Update Highlight View
     * @param {number} highlightId
     * @param {HighlightUpdateSchema} highlightUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    updateHighlightViewPatch(requestParameters: StoryApiUpdateHighlightViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<HighlightDetailSchema>;
    /**
     *
     * @summary Update Story View
     * @param {number} storyId
     * @param {StoryUpdateSchema} storyUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    updateStoryViewPatch(requestParameters: StoryApiUpdateStoryViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<Story>;
    /**
     *
     * @summary View Story View
     * @param {number} userId
     * @param {StoryViewSchema} storyViewSchema
     * @param {boolean} [viewAll] View all actual stories of user.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApiInterface
     */
    viewStoryViewPost(requestParameters: StoryApiViewStoryViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
}
/**
 * StoryApi - object-oriented interface
 * @export
 * @class StoryApi
 * @extends {BaseAPI}
 */
export declare class StoryApi extends BaseAPI implements StoryApiInterface {
    /**
     *
     * @summary Add Story To Highlight View
     * @param {StoryApiAddStoryToHighlightViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    addStoryToHighlightViewPost(requestParameters: StoryApiAddStoryToHighlightViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseInfo, any>>;
    /**
     *
     * @summary Create Highlight View
     * @param {StoryApiCreateHighlightViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    createHighlightViewPost(requestParameters: StoryApiCreateHighlightViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HighlightDetailSchema, any>>;
    /**
     *
     * @summary Create Story View
     * @param {StoryApiCreateStoryViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    createStoryViewPost(requestParameters: StoryApiCreateStoryViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StoryModelSchemaDetail, any>>;
    /**
     *
     * @summary Delete Highlight View
     * @param {StoryApiDeleteHighlightViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    deleteHighlightViewDelete(requestParameters: StoryApiDeleteHighlightViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseInfo, any>>;
    /**
     *
     * @summary Delete Story View
     * @param {StoryApiDeleteStoryViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    deleteStoryViewDelete(requestParameters: StoryApiDeleteStoryViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ResponseInfo, any>>;
    /**
     *
     * @summary Get Actual Stories View
     * @param {StoryApiGetActualStoriesViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getActualStoriesViewGet(requestParameters: StoryApiGetActualStoriesViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ActualStoriesList, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Highilight Stories View
     * @param {StoryApiGetHighilightStoriesViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getHighilightStoriesViewGet(requestParameters: StoryApiGetHighilightStoriesViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StoryListSchema, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int
     * @summary Get Highlights View
     * @param {StoryApiGetHighlightsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getHighlightsViewGet(requestParameters: StoryApiGetHighlightsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StoryHighlightListSchemaWithAvatar, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - last_story_created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'
     * @summary Get Stories Feed View
     * @param {StoryApiGetStoriesFeedViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getStoriesFeedViewGet(requestParameters?: StoryApiGetStoriesFeedViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserStoryFeedList, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  id: int created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'  The defaul sorting is \'-created_at\'.
     * @summary Get Stories View
     * @param {StoryApiGetStoriesViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getStoriesViewGet(requestParameters?: StoryApiGetStoriesViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StoryListSchema, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - username: str
     * @summary Get Story Hidden List View
     * @param {StoryApiGetStoryHiddenListViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getStoryHiddenListViewGet(requestParameters: StoryApiGetStoryHiddenListViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StoryHiddenList, any>>;
    /**
     *
     * @summary Get Story Reply Permission View
     * @param {StoryApiGetStoryReplyPermissionViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getStoryReplyPermissionViewGet(requestParameters: StoryApiGetStoryReplyPermissionViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ReplyPermissionDict, any>>;
    /**
     *
     * @summary Get Story View
     * @param {StoryApiGetStoryViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getStoryViewGet(requestParameters: StoryApiGetStoryViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<SJBGetStory, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  id: int created_at: str (ISO 8601 format). Example: \'2023-05-17T16:15:20.315Z\'  The defaul sorting is \'-id\'.
     * @summary Get Story Views View
     * @param {StoryApiGetStoryViewsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    getStoryViewsViewGet(requestParameters: StoryApiGetStoryViewsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<StoryViewListSchema, any>>;
    /**
     *
     * @summary Remove Story From Highlight View
     * @param {StoryApiRemoveStoryFromHighlightViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    removeStoryFromHighlightViewDelete(requestParameters?: StoryApiRemoveStoryFromHighlightViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Update Highlight View
     * @param {StoryApiUpdateHighlightViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    updateHighlightViewPatch(requestParameters: StoryApiUpdateHighlightViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<HighlightDetailSchema, any>>;
    /**
     *
     * @summary Update Story View
     * @param {StoryApiUpdateStoryViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    updateStoryViewPatch(requestParameters: StoryApiUpdateStoryViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<Story, any>>;
    /**
     *
     * @summary View Story View
     * @param {StoryApiViewStoryViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoryApi
     */
    viewStoryViewPost(requestParameters: StoryApiViewStoryViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
