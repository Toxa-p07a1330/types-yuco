/**
 * Yuco Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosConfiguration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ApproveTagSchema } from '../model';
import type { PostCreateSchema } from '../model';
import type { PostDetailSchema } from '../model';
import type { PostDetailSchemaWithFlags } from '../model';
import type { PostIdSchema } from '../model';
import type { PostReactionCount } from '../model';
import type { PostRepostSchema } from '../model';
import type { PostSearchListSchema } from '../model';
import type { PostUpdateSchema } from '../model';
import type { PostsFeedSchema } from '../model';
import type { TopPostsFeedSchema } from '../model';
/**
 * PostApi - axios parameter creator
 * @export
 */
export declare const PostApiAxiosParamCreator: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Approve Tags View
     * @param {ApproveTagSchema} approveTagSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTagsViewPost: (approveTagSchema: ApproveTagSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create Post View
     * @param {PostCreateSchema} postCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPostViewPost: (postCreateSchema: PostCreateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostViewDelete: (postId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Post By Id View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostByIdViewGet: (postId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int - reactions_count: int
     * @summary Get Post List View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {number} [authorId] User posts. Pass the user id
     * @param {string} [hashtag] Posts having this hashtag by name
     * @param {boolean} [myFollowings] Posts from subscriptions
     * @param {boolean} [isSave] Saved posts
     * @param {boolean} [isPhoto] Post with photo content
     * @param {boolean} [isVideo] Post with video content
     * @param {boolean} [taggsApproved] Posts where current user tagged and tag approved or tags are waiting for approve.
     * @param {number} [authorTags] Posts where the author has been tagged and tagges was approved.
     * @param {number} [locationId] Posts from the specific location.
     * @param {boolean} [isDraft] Current users drafts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostListViewGet: (sort?: string, offset?: string, limit?: number, authorId?: number, hashtag?: string, myFollowings?: boolean, isSave?: boolean, isPhoto?: boolean, isVideo?: boolean, taggsApproved?: boolean, authorTags?: number, locationId?: number, isDraft?: boolean, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Post Reaction Count View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostReactionCountViewGet: (postId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Use \'last_id\' and \'reactio # @authenticatens_count\' filters with values from last getted row for pagination. ## First page can be retrieved without these filters.
     * @summary Get Top Posts View
     * @param {string} [offset] Values of last received row which used in sort.Example with sort: sort&#x3D;-&amp;reactions_count,id&amp;offset&#x3D;123,789
     * @param {boolean} [followingReacted] The users from followings reacted on post.
     * @param {string} [createdDate] The latest date of creation of posts (including).
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopPostsViewGet: (offset?: string, followingReacted?: boolean, createdDate?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Make Repost View
     * @param {PostRepostSchema} postRepostSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeRepostViewPut: (postRepostSchema: PostRepostSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Save Post View
     * @param {PostIdSchema} postIdSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    savePostViewPost: (postIdSchema: PostIdSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Search Posts View
     * @param {string} query Query to find posts.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPostsViewGet: (query: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Unsave Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsavePostViewDelete: (postId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Post View
     * @param {number} postId
     * @param {PostUpdateSchema} postUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostViewPatch: (postId: number, postUpdateSchema: PostUpdateSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PostApi - functional programming interface
 * @export
 */
export declare const PostApiFp: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Approve Tags View
     * @param {ApproveTagSchema} approveTagSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    approveTagsViewPost(approveTagSchema: ApproveTagSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Create Post View
     * @param {PostCreateSchema} postCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPostViewPost(postCreateSchema: PostCreateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Delete Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePostViewDelete(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get Post By Id View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostByIdViewGet(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDetailSchemaWithFlags>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int - reactions_count: int
     * @summary Get Post List View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {number} [authorId] User posts. Pass the user id
     * @param {string} [hashtag] Posts having this hashtag by name
     * @param {boolean} [myFollowings] Posts from subscriptions
     * @param {boolean} [isSave] Saved posts
     * @param {boolean} [isPhoto] Post with photo content
     * @param {boolean} [isVideo] Post with video content
     * @param {boolean} [taggsApproved] Posts where current user tagged and tag approved or tags are waiting for approve.
     * @param {number} [authorTags] Posts where the author has been tagged and tagges was approved.
     * @param {number} [locationId] Posts from the specific location.
     * @param {boolean} [isDraft] Current users drafts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostListViewGet(sort?: string, offset?: string, limit?: number, authorId?: number, hashtag?: string, myFollowings?: boolean, isSave?: boolean, isPhoto?: boolean, isVideo?: boolean, taggsApproved?: boolean, authorTags?: number, locationId?: number, isDraft?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostsFeedSchema>>;
    /**
     *
     * @summary Get Post Reaction Count View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPostReactionCountViewGet(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostReactionCount>>;
    /**
     * ## Use \'last_id\' and \'reactio # @authenticatens_count\' filters with values from last getted row for pagination. ## First page can be retrieved without these filters.
     * @summary Get Top Posts View
     * @param {string} [offset] Values of last received row which used in sort.Example with sort: sort&#x3D;-&amp;reactions_count,id&amp;offset&#x3D;123,789
     * @param {boolean} [followingReacted] The users from followings reacted on post.
     * @param {string} [createdDate] The latest date of creation of posts (including).
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTopPostsViewGet(offset?: string, followingReacted?: boolean, createdDate?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TopPostsFeedSchema>>;
    /**
     *
     * @summary Make Repost View
     * @param {PostRepostSchema} postRepostSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeRepostViewPut(postRepostSchema: PostRepostSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDetailSchema>>;
    /**
     *
     * @summary Save Post View
     * @param {PostIdSchema} postIdSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    savePostViewPost(postIdSchema: PostIdSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Search Posts View
     * @param {string} query Query to find posts.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPostsViewGet(query: string, offset?: string, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostSearchListSchema>>;
    /**
     *
     * @summary Unsave Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unsavePostViewDelete(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Update Post View
     * @param {number} postId
     * @param {PostUpdateSchema} postUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostViewPatch(postId: number, postUpdateSchema: PostUpdateSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PostDetailSchema>>;
};
/**
 * Request parameters for approveTagsViewPost operation in PostApi.
 * @export
 * @interface PostApiApproveTagsViewPostRequest
 */
export interface PostApiApproveTagsViewPostRequest {
    /**
     *
     * @type {ApproveTagSchema}
     * @memberof PostApiApproveTagsViewPost
     */
    readonly approveTagSchema: ApproveTagSchema;
}
/**
 * Request parameters for createPostViewPost operation in PostApi.
 * @export
 * @interface PostApiCreatePostViewPostRequest
 */
export interface PostApiCreatePostViewPostRequest {
    /**
     *
     * @type {PostCreateSchema}
     * @memberof PostApiCreatePostViewPost
     */
    readonly postCreateSchema: PostCreateSchema;
}
/**
 * Request parameters for deletePostViewDelete operation in PostApi.
 * @export
 * @interface PostApiDeletePostViewDeleteRequest
 */
export interface PostApiDeletePostViewDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof PostApiDeletePostViewDelete
     */
    readonly postId: number;
}
/**
 * Request parameters for getPostByIdViewGet operation in PostApi.
 * @export
 * @interface PostApiGetPostByIdViewGetRequest
 */
export interface PostApiGetPostByIdViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof PostApiGetPostByIdViewGet
     */
    readonly postId: number;
}
/**
 * Request parameters for getPostListViewGet operation in PostApi.
 * @export
 * @interface PostApiGetPostListViewGetRequest
 */
export interface PostApiGetPostListViewGetRequest {
    /**
     * Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @type {string}
     * @memberof PostApiGetPostListViewGet
     */
    readonly sort?: string;
    /**
     * Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @type {string}
     * @memberof PostApiGetPostListViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof PostApiGetPostListViewGet
     */
    readonly limit?: number;
    /**
     * User posts. Pass the user id
     * @type {number}
     * @memberof PostApiGetPostListViewGet
     */
    readonly authorId?: number;
    /**
     * Posts having this hashtag by name
     * @type {string}
     * @memberof PostApiGetPostListViewGet
     */
    readonly hashtag?: string;
    /**
     * Posts from subscriptions
     * @type {boolean}
     * @memberof PostApiGetPostListViewGet
     */
    readonly myFollowings?: boolean;
    /**
     * Saved posts
     * @type {boolean}
     * @memberof PostApiGetPostListViewGet
     */
    readonly isSave?: boolean;
    /**
     * Post with photo content
     * @type {boolean}
     * @memberof PostApiGetPostListViewGet
     */
    readonly isPhoto?: boolean;
    /**
     * Post with video content
     * @type {boolean}
     * @memberof PostApiGetPostListViewGet
     */
    readonly isVideo?: boolean;
    /**
     * Posts where current user tagged and tag approved or tags are waiting for approve.
     * @type {boolean}
     * @memberof PostApiGetPostListViewGet
     */
    readonly taggsApproved?: boolean;
    /**
     * Posts where the author has been tagged and tagges was approved.
     * @type {number}
     * @memberof PostApiGetPostListViewGet
     */
    readonly authorTags?: number;
    /**
     * Posts from the specific location.
     * @type {number}
     * @memberof PostApiGetPostListViewGet
     */
    readonly locationId?: number;
    /**
     * Current users drafts.
     * @type {boolean}
     * @memberof PostApiGetPostListViewGet
     */
    readonly isDraft?: boolean;
}
/**
 * Request parameters for getPostReactionCountViewGet operation in PostApi.
 * @export
 * @interface PostApiGetPostReactionCountViewGetRequest
 */
export interface PostApiGetPostReactionCountViewGetRequest {
    /**
     *
     * @type {number}
     * @memberof PostApiGetPostReactionCountViewGet
     */
    readonly postId: number;
}
/**
 * Request parameters for getTopPostsViewGet operation in PostApi.
 * @export
 * @interface PostApiGetTopPostsViewGetRequest
 */
export interface PostApiGetTopPostsViewGetRequest {
    /**
     * Values of last received row which used in sort.Example with sort: sort&#x3D;-&amp;reactions_count,id&amp;offset&#x3D;123,789
     * @type {string}
     * @memberof PostApiGetTopPostsViewGet
     */
    readonly offset?: string;
    /**
     * The users from followings reacted on post.
     * @type {boolean}
     * @memberof PostApiGetTopPostsViewGet
     */
    readonly followingReacted?: boolean;
    /**
     * The latest date of creation of posts (including).
     * @type {string}
     * @memberof PostApiGetTopPostsViewGet
     */
    readonly createdDate?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof PostApiGetTopPostsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for makeRepostViewPut operation in PostApi.
 * @export
 * @interface PostApiMakeRepostViewPutRequest
 */
export interface PostApiMakeRepostViewPutRequest {
    /**
     *
     * @type {PostRepostSchema}
     * @memberof PostApiMakeRepostViewPut
     */
    readonly postRepostSchema: PostRepostSchema;
}
/**
 * Request parameters for savePostViewPost operation in PostApi.
 * @export
 * @interface PostApiSavePostViewPostRequest
 */
export interface PostApiSavePostViewPostRequest {
    /**
     *
     * @type {PostIdSchema}
     * @memberof PostApiSavePostViewPost
     */
    readonly postIdSchema: PostIdSchema;
}
/**
 * Request parameters for searchPostsViewGet operation in PostApi.
 * @export
 * @interface PostApiSearchPostsViewGetRequest
 */
export interface PostApiSearchPostsViewGetRequest {
    /**
     * Query to find posts.
     * @type {string}
     * @memberof PostApiSearchPostsViewGet
     */
    readonly query: string;
    /**
     * Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @type {string}
     * @memberof PostApiSearchPostsViewGet
     */
    readonly offset?: string;
    /**
     * Limit of rows count in the response
     * @type {number}
     * @memberof PostApiSearchPostsViewGet
     */
    readonly limit?: number;
}
/**
 * Request parameters for unsavePostViewDelete operation in PostApi.
 * @export
 * @interface PostApiUnsavePostViewDeleteRequest
 */
export interface PostApiUnsavePostViewDeleteRequest {
    /**
     *
     * @type {number}
     * @memberof PostApiUnsavePostViewDelete
     */
    readonly postId: number;
}
/**
 * Request parameters for updatePostViewPatch operation in PostApi.
 * @export
 * @interface PostApiUpdatePostViewPatchRequest
 */
export interface PostApiUpdatePostViewPatchRequest {
    /**
     *
     * @type {number}
     * @memberof PostApiUpdatePostViewPatch
     */
    readonly postId: number;
    /**
     *
     * @type {PostUpdateSchema}
     * @memberof PostApiUpdatePostViewPatch
     */
    readonly postUpdateSchema: PostUpdateSchema;
}
/**
 * PostApi - interface
 * @export
 * @interface PostApi
 */
export interface PostApiInterface {
    /**
     *
     * @summary Approve Tags View
     * @param {ApproveTagSchema} approveTagSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    approveTagsViewPost(requestParameters: PostApiApproveTagsViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Create Post View
     * @param {PostCreateSchema} postCreateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    createPostViewPost(requestParameters: PostApiCreatePostViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Delete Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    deletePostViewDelete(requestParameters: PostApiDeletePostViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Get Post By Id View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    getPostByIdViewGet(requestParameters: PostApiGetPostByIdViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostDetailSchemaWithFlags>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int - reactions_count: int
     * @summary Get Post List View
     * @param {string} [sort] Fields for ordering without spaces and separated by commas.Can be used for ASC and DESC (\&#39;-\&#39; added to the beggining of the field).Example: &amp;sort&#x3D;-username,created_at
     * @param {string} [offset] Values of last received row which used in sort. Example with sort: sort&#x3D;username,-id&amp;offset&#x3D;username123,987
     * @param {number} [limit] Limit of rows count in the response
     * @param {number} [authorId] User posts. Pass the user id
     * @param {string} [hashtag] Posts having this hashtag by name
     * @param {boolean} [myFollowings] Posts from subscriptions
     * @param {boolean} [isSave] Saved posts
     * @param {boolean} [isPhoto] Post with photo content
     * @param {boolean} [isVideo] Post with video content
     * @param {boolean} [taggsApproved] Posts where current user tagged and tag approved or tags are waiting for approve.
     * @param {number} [authorTags] Posts where the author has been tagged and tagges was approved.
     * @param {number} [locationId] Posts from the specific location.
     * @param {boolean} [isDraft] Current users drafts.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    getPostListViewGet(requestParameters: PostApiGetPostListViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostsFeedSchema>;
    /**
     *
     * @summary Get Post Reaction Count View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    getPostReactionCountViewGet(requestParameters: PostApiGetPostReactionCountViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostReactionCount>;
    /**
     * ## Use \'last_id\' and \'reactio # @authenticatens_count\' filters with values from last getted row for pagination. ## First page can be retrieved without these filters.
     * @summary Get Top Posts View
     * @param {string} [offset] Values of last received row which used in sort.Example with sort: sort&#x3D;-&amp;reactions_count,id&amp;offset&#x3D;123,789
     * @param {boolean} [followingReacted] The users from followings reacted on post.
     * @param {string} [createdDate] The latest date of creation of posts (including).
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    getTopPostsViewGet(requestParameters: PostApiGetTopPostsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<TopPostsFeedSchema>;
    /**
     *
     * @summary Make Repost View
     * @param {PostRepostSchema} postRepostSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    makeRepostViewPut(requestParameters: PostApiMakeRepostViewPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostDetailSchema>;
    /**
     *
     * @summary Save Post View
     * @param {PostIdSchema} postIdSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    savePostViewPost(requestParameters: PostApiSavePostViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Search Posts View
     * @param {string} query Query to find posts.
     * @param {string} [offset] Values of last received row which used in sort. Passed asa string and separeted by commas. Example with sort: &amp;offset&#x3D;12.34,10
     * @param {number} [limit] Limit of rows count in the response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    searchPostsViewGet(requestParameters: PostApiSearchPostsViewGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostSearchListSchema>;
    /**
     *
     * @summary Unsave Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    unsavePostViewDelete(requestParameters: PostApiUnsavePostViewDeleteRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Update Post View
     * @param {number} postId
     * @param {PostUpdateSchema} postUpdateSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApiInterface
     */
    updatePostViewPatch(requestParameters: PostApiUpdatePostViewPatchRequest, options?: RawAxiosRequestConfig): AxiosPromise<PostDetailSchema>;
}
/**
 * PostApi - object-oriented interface
 * @export
 * @class PostApi
 * @extends {BaseAPI}
 */
export declare class PostApi extends BaseAPI implements PostApiInterface {
    /**
     *
     * @summary Approve Tags View
     * @param {PostApiApproveTagsViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    approveTagsViewPost(requestParameters: PostApiApproveTagsViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Create Post View
     * @param {PostApiCreatePostViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    createPostViewPost(requestParameters: PostApiCreatePostViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Delete Post View
     * @param {PostApiDeletePostViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    deletePostViewDelete(requestParameters: PostApiDeletePostViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get Post By Id View
     * @param {PostApiGetPostByIdViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    getPostByIdViewGet(requestParameters: PostApiGetPostByIdViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PostDetailSchemaWithFlags, any>>;
    /**
     * ## Available fields for *sort* and *offset*:  - id: int - reactions_count: int
     * @summary Get Post List View
     * @param {PostApiGetPostListViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    getPostListViewGet(requestParameters?: PostApiGetPostListViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PostsFeedSchema, any>>;
    /**
     *
     * @summary Get Post Reaction Count View
     * @param {PostApiGetPostReactionCountViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    getPostReactionCountViewGet(requestParameters: PostApiGetPostReactionCountViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PostReactionCount, any>>;
    /**
     * ## Use \'last_id\' and \'reactio # @authenticatens_count\' filters with values from last getted row for pagination. ## First page can be retrieved without these filters.
     * @summary Get Top Posts View
     * @param {PostApiGetTopPostsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    getTopPostsViewGet(requestParameters?: PostApiGetTopPostsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<TopPostsFeedSchema, any>>;
    /**
     *
     * @summary Make Repost View
     * @param {PostApiMakeRepostViewPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    makeRepostViewPut(requestParameters: PostApiMakeRepostViewPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PostDetailSchema, any>>;
    /**
     *
     * @summary Save Post View
     * @param {PostApiSavePostViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    savePostViewPost(requestParameters: PostApiSavePostViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     * ## Fields are used for offset (together only):  - score: float - id: int  ## ?offset=\'last_score,last_id\'  ## Example: &offset=\'32.2,40\'
     * @summary Search Posts View
     * @param {PostApiSearchPostsViewGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    searchPostsViewGet(requestParameters: PostApiSearchPostsViewGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PostSearchListSchema, any>>;
    /**
     *
     * @summary Unsave Post View
     * @param {PostApiUnsavePostViewDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    unsavePostViewDelete(requestParameters: PostApiUnsavePostViewDeleteRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Update Post View
     * @param {PostApiUpdatePostViewPatchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PostApi
     */
    updatePostViewPatch(requestParameters: PostApiUpdatePostViewPatchRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<PostDetailSchema, any>>;
}
