/**
 * Yuco Backend
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { AxiosConfiguration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { type RequestArgs, BaseAPI } from '../base';
import type { ContentsModelDetailSchema } from '../model';
import type { FirebaseHotTokenListSchema } from '../model';
import type { PostUpdateContentSchema } from '../model';
import type { StoryUpdateContentSchema } from '../model';
import type { TokenList } from '../model';
import type { TopicActSchema } from '../model';
import type { UserUsernameAvatarList } from '../model';
/**
 * PrivateApi - axios parameter creator
 * @export
 */
export declare const PrivateApiAxiosParamCreator: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Activate Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activatePostViewPut: (postId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Activate Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateStoryViewPut: (storyId: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Fcmtopic Add
     * @param {TopicActSchema} topicActSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fcmtopicAddPost: (topicActSchema: TopicActSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Fcmtopic Del
     * @param {TopicActSchema} topicActSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fcmtopicDelPost: (topicActSchema: TopicActSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Active Tokens
     * @param {Array<string>} [accountUuids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveTokensGet: (accountUuids?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Content
     * @param {Set<number>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContentGet: (ids?: Set<number>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Thumbnail
     * @param {string} type
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getThumbnailGet: (type: string, id: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get Userdata
     * @param {Array<string>} [accountUuids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserdataGet: (accountUuids?: Array<string>, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Purge Inactive Tokens
     * @param {TokenList} tokenList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purgeInactiveTokensPost: (tokenList: TokenList, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Rtmp On Connect
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [swfurl]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {number} [epoch]
     * @param {string} [call]
     * @param {number} [clientid]
     * @param {string} [liveToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rtmpOnConnectPost: (app?: string, flashver?: string, swfurl?: string, tcurl?: string, pageurl?: string, addr?: string, epoch?: number, call?: string, clientid?: number, liveToken?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Rtmp On Publish Done
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {string} [call]
     * @param {string} [name]
     * @param {number} [clientid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rtmpOnPublishDonePost: (app?: string, flashver?: string, tcurl?: string, pageurl?: string, addr?: string, call?: string, name?: string, clientid?: number, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Rtmp On Publish
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [swfurl]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {string} [call]
     * @param {string} [name]
     * @param {number} [clientid]
     * @param {string} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rtmpOnPublishPost: (app?: string, flashver?: string, swfurl?: string, tcurl?: string, pageurl?: string, addr?: string, call?: string, name?: string, clientid?: number, type?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Post Content View
     * @param {number} postId
     * @param {PostUpdateContentSchema} postUpdateContentSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostContentViewPost: (postId: number, postUpdateContentSchema: PostUpdateContentSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update Story Content View
     * @param {number} storyId
     * @param {StoryUpdateContentSchema} storyUpdateContentSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStoryContentViewPut: (storyId: number, storyUpdateContentSchema: StoryUpdateContentSchema, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PrivateApi - functional programming interface
 * @export
 */
export declare const PrivateApiFp: (configuration?: AxiosConfiguration) => {
    /**
     *
     * @summary Activate Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activatePostViewPut(postId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Activate Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    activateStoryViewPut(storyId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Fcmtopic Add
     * @param {TopicActSchema} topicActSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fcmtopicAddPost(topicActSchema: TopicActSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Fcmtopic Del
     * @param {TopicActSchema} topicActSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    fcmtopicDelPost(topicActSchema: TopicActSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Get Active Tokens
     * @param {Array<string>} [accountUuids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getActiveTokensGet(accountUuids?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FirebaseHotTokenListSchema>>;
    /**
     *
     * @summary Get Content
     * @param {Set<number>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getContentGet(ids?: Set<number>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ContentsModelDetailSchema>>;
    /**
     *
     * @summary Get Thumbnail
     * @param {string} type
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getThumbnailGet(type: string, id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Get Userdata
     * @param {Array<string>} [accountUuids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserdataGet(accountUuids?: Array<string>, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserUsernameAvatarList>>;
    /**
     *
     * @summary Purge Inactive Tokens
     * @param {TokenList} tokenList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    purgeInactiveTokensPost(tokenList: TokenList, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Rtmp On Connect
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [swfurl]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {number} [epoch]
     * @param {string} [call]
     * @param {number} [clientid]
     * @param {string} [liveToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rtmpOnConnectPost(app?: string, flashver?: string, swfurl?: string, tcurl?: string, pageurl?: string, addr?: string, epoch?: number, call?: string, clientid?: number, liveToken?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Rtmp On Publish Done
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {string} [call]
     * @param {string} [name]
     * @param {number} [clientid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rtmpOnPublishDonePost(app?: string, flashver?: string, tcurl?: string, pageurl?: string, addr?: string, call?: string, name?: string, clientid?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Rtmp On Publish
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [swfurl]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {string} [call]
     * @param {string} [name]
     * @param {number} [clientid]
     * @param {string} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rtmpOnPublishPost(app?: string, flashver?: string, swfurl?: string, tcurl?: string, pageurl?: string, addr?: string, call?: string, name?: string, clientid?: number, type?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update Post Content View
     * @param {number} postId
     * @param {PostUpdateContentSchema} postUpdateContentSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePostContentViewPost(postId: number, postUpdateContentSchema: PostUpdateContentSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
    /**
     *
     * @summary Update Story Content View
     * @param {number} storyId
     * @param {StoryUpdateContentSchema} storyUpdateContentSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateStoryContentViewPut(storyId: number, storyUpdateContentSchema: StoryUpdateContentSchema, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>>;
};
/**
 * Request parameters for activatePostViewPut operation in PrivateApi.
 * @export
 * @interface PrivateApiActivatePostViewPutRequest
 */
export interface PrivateApiActivatePostViewPutRequest {
    /**
     *
     * @type {number}
     * @memberof PrivateApiActivatePostViewPut
     */
    readonly postId: number;
}
/**
 * Request parameters for activateStoryViewPut operation in PrivateApi.
 * @export
 * @interface PrivateApiActivateStoryViewPutRequest
 */
export interface PrivateApiActivateStoryViewPutRequest {
    /**
     *
     * @type {number}
     * @memberof PrivateApiActivateStoryViewPut
     */
    readonly storyId: number;
}
/**
 * Request parameters for fcmtopicAddPost operation in PrivateApi.
 * @export
 * @interface PrivateApiFcmtopicAddPostRequest
 */
export interface PrivateApiFcmtopicAddPostRequest {
    /**
     *
     * @type {TopicActSchema}
     * @memberof PrivateApiFcmtopicAddPost
     */
    readonly topicActSchema: TopicActSchema;
}
/**
 * Request parameters for fcmtopicDelPost operation in PrivateApi.
 * @export
 * @interface PrivateApiFcmtopicDelPostRequest
 */
export interface PrivateApiFcmtopicDelPostRequest {
    /**
     *
     * @type {TopicActSchema}
     * @memberof PrivateApiFcmtopicDelPost
     */
    readonly topicActSchema: TopicActSchema;
}
/**
 * Request parameters for getActiveTokensGet operation in PrivateApi.
 * @export
 * @interface PrivateApiGetActiveTokensGetRequest
 */
export interface PrivateApiGetActiveTokensGetRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof PrivateApiGetActiveTokensGet
     */
    readonly accountUuids?: Array<string>;
}
/**
 * Request parameters for getContentGet operation in PrivateApi.
 * @export
 * @interface PrivateApiGetContentGetRequest
 */
export interface PrivateApiGetContentGetRequest {
    /**
     *
     * @type {Set<number>}
     * @memberof PrivateApiGetContentGet
     */
    readonly ids?: Set<number>;
}
/**
 * Request parameters for getThumbnailGet operation in PrivateApi.
 * @export
 * @interface PrivateApiGetThumbnailGetRequest
 */
export interface PrivateApiGetThumbnailGetRequest {
    /**
     *
     * @type {string}
     * @memberof PrivateApiGetThumbnailGet
     */
    readonly type: string;
    /**
     *
     * @type {number}
     * @memberof PrivateApiGetThumbnailGet
     */
    readonly id: number;
}
/**
 * Request parameters for getUserdataGet operation in PrivateApi.
 * @export
 * @interface PrivateApiGetUserdataGetRequest
 */
export interface PrivateApiGetUserdataGetRequest {
    /**
     *
     * @type {Array<string>}
     * @memberof PrivateApiGetUserdataGet
     */
    readonly accountUuids?: Array<string>;
}
/**
 * Request parameters for purgeInactiveTokensPost operation in PrivateApi.
 * @export
 * @interface PrivateApiPurgeInactiveTokensPostRequest
 */
export interface PrivateApiPurgeInactiveTokensPostRequest {
    /**
     *
     * @type {TokenList}
     * @memberof PrivateApiPurgeInactiveTokensPost
     */
    readonly tokenList: TokenList;
}
/**
 * Request parameters for rtmpOnConnectPost operation in PrivateApi.
 * @export
 * @interface PrivateApiRtmpOnConnectPostRequest
 */
export interface PrivateApiRtmpOnConnectPostRequest {
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly app?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly flashver?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly swfurl?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly tcurl?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly pageurl?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly addr?: string;
    /**
     *
     * @type {number}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly epoch?: number;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly call?: string;
    /**
     *
     * @type {number}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly clientid?: number;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnConnectPost
     */
    readonly liveToken?: string;
}
/**
 * Request parameters for rtmpOnPublishDonePost operation in PrivateApi.
 * @export
 * @interface PrivateApiRtmpOnPublishDonePostRequest
 */
export interface PrivateApiRtmpOnPublishDonePostRequest {
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishDonePost
     */
    readonly app?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishDonePost
     */
    readonly flashver?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishDonePost
     */
    readonly tcurl?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishDonePost
     */
    readonly pageurl?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishDonePost
     */
    readonly addr?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishDonePost
     */
    readonly call?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishDonePost
     */
    readonly name?: string;
    /**
     *
     * @type {number}
     * @memberof PrivateApiRtmpOnPublishDonePost
     */
    readonly clientid?: number;
}
/**
 * Request parameters for rtmpOnPublishPost operation in PrivateApi.
 * @export
 * @interface PrivateApiRtmpOnPublishPostRequest
 */
export interface PrivateApiRtmpOnPublishPostRequest {
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly app?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly flashver?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly swfurl?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly tcurl?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly pageurl?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly addr?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly call?: string;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly name?: string;
    /**
     *
     * @type {number}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly clientid?: number;
    /**
     *
     * @type {string}
     * @memberof PrivateApiRtmpOnPublishPost
     */
    readonly type?: string;
}
/**
 * Request parameters for updatePostContentViewPost operation in PrivateApi.
 * @export
 * @interface PrivateApiUpdatePostContentViewPostRequest
 */
export interface PrivateApiUpdatePostContentViewPostRequest {
    /**
     *
     * @type {number}
     * @memberof PrivateApiUpdatePostContentViewPost
     */
    readonly postId: number;
    /**
     *
     * @type {PostUpdateContentSchema}
     * @memberof PrivateApiUpdatePostContentViewPost
     */
    readonly postUpdateContentSchema: PostUpdateContentSchema;
}
/**
 * Request parameters for updateStoryContentViewPut operation in PrivateApi.
 * @export
 * @interface PrivateApiUpdateStoryContentViewPutRequest
 */
export interface PrivateApiUpdateStoryContentViewPutRequest {
    /**
     *
     * @type {number}
     * @memberof PrivateApiUpdateStoryContentViewPut
     */
    readonly storyId: number;
    /**
     *
     * @type {StoryUpdateContentSchema}
     * @memberof PrivateApiUpdateStoryContentViewPut
     */
    readonly storyUpdateContentSchema: StoryUpdateContentSchema;
}
/**
 * PrivateApi - interface
 * @export
 * @interface PrivateApi
 */
export interface PrivateApiInterface {
    /**
     *
     * @summary Activate Post View
     * @param {number} postId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    activatePostViewPut(requestParameters: PrivateApiActivatePostViewPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Activate Story View
     * @param {number} storyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    activateStoryViewPut(requestParameters: PrivateApiActivateStoryViewPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Fcmtopic Add
     * @param {TopicActSchema} topicActSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    fcmtopicAddPost(requestParameters: PrivateApiFcmtopicAddPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Fcmtopic Del
     * @param {TopicActSchema} topicActSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    fcmtopicDelPost(requestParameters: PrivateApiFcmtopicDelPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Get Active Tokens
     * @param {Array<string>} [accountUuids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    getActiveTokensGet(requestParameters: PrivateApiGetActiveTokensGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<FirebaseHotTokenListSchema>;
    /**
     *
     * @summary Get Content
     * @param {Set<number>} [ids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    getContentGet(requestParameters: PrivateApiGetContentGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<ContentsModelDetailSchema>;
    /**
     *
     * @summary Get Thumbnail
     * @param {string} type
     * @param {number} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    getThumbnailGet(requestParameters: PrivateApiGetThumbnailGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Get Userdata
     * @param {Array<string>} [accountUuids]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    getUserdataGet(requestParameters: PrivateApiGetUserdataGetRequest, options?: RawAxiosRequestConfig): AxiosPromise<UserUsernameAvatarList>;
    /**
     *
     * @summary Purge Inactive Tokens
     * @param {TokenList} tokenList
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    purgeInactiveTokensPost(requestParameters: PrivateApiPurgeInactiveTokensPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Rtmp On Connect
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [swfurl]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {number} [epoch]
     * @param {string} [call]
     * @param {number} [clientid]
     * @param {string} [liveToken]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    rtmpOnConnectPost(requestParameters: PrivateApiRtmpOnConnectPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Rtmp On Publish Done
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {string} [call]
     * @param {string} [name]
     * @param {number} [clientid]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    rtmpOnPublishDonePost(requestParameters: PrivateApiRtmpOnPublishDonePostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Rtmp On Publish
     * @param {string} [app]
     * @param {string} [flashver]
     * @param {string} [swfurl]
     * @param {string} [tcurl]
     * @param {string} [pageurl]
     * @param {string} [addr]
     * @param {string} [call]
     * @param {string} [name]
     * @param {number} [clientid]
     * @param {string} [type]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    rtmpOnPublishPost(requestParameters: PrivateApiRtmpOnPublishPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
    /**
     *
     * @summary Update Post Content View
     * @param {number} postId
     * @param {PostUpdateContentSchema} postUpdateContentSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    updatePostContentViewPost(requestParameters: PrivateApiUpdatePostContentViewPostRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
    /**
     *
     * @summary Update Story Content View
     * @param {number} storyId
     * @param {StoryUpdateContentSchema} storyUpdateContentSchema
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApiInterface
     */
    updateStoryContentViewPut(requestParameters: PrivateApiUpdateStoryContentViewPutRequest, options?: RawAxiosRequestConfig): AxiosPromise<any>;
}
/**
 * PrivateApi - object-oriented interface
 * @export
 * @class PrivateApi
 * @extends {BaseAPI}
 */
export declare class PrivateApi extends BaseAPI implements PrivateApiInterface {
    /**
     *
     * @summary Activate Post View
     * @param {PrivateApiActivatePostViewPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    activatePostViewPut(requestParameters: PrivateApiActivatePostViewPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Activate Story View
     * @param {PrivateApiActivateStoryViewPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    activateStoryViewPut(requestParameters: PrivateApiActivateStoryViewPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Fcmtopic Add
     * @param {PrivateApiFcmtopicAddPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    fcmtopicAddPost(requestParameters: PrivateApiFcmtopicAddPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Fcmtopic Del
     * @param {PrivateApiFcmtopicDelPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    fcmtopicDelPost(requestParameters: PrivateApiFcmtopicDelPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Get Active Tokens
     * @param {PrivateApiGetActiveTokensGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    getActiveTokensGet(requestParameters?: PrivateApiGetActiveTokensGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<FirebaseHotTokenListSchema, any>>;
    /**
     *
     * @summary Get Content
     * @param {PrivateApiGetContentGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    getContentGet(requestParameters?: PrivateApiGetContentGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<ContentsModelDetailSchema, any>>;
    /**
     *
     * @summary Get Thumbnail
     * @param {PrivateApiGetThumbnailGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    getThumbnailGet(requestParameters: PrivateApiGetThumbnailGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Get Userdata
     * @param {PrivateApiGetUserdataGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    getUserdataGet(requestParameters?: PrivateApiGetUserdataGetRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<UserUsernameAvatarList, any>>;
    /**
     *
     * @summary Purge Inactive Tokens
     * @param {PrivateApiPurgeInactiveTokensPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    purgeInactiveTokensPost(requestParameters: PrivateApiPurgeInactiveTokensPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Rtmp On Connect
     * @param {PrivateApiRtmpOnConnectPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    rtmpOnConnectPost(requestParameters?: PrivateApiRtmpOnConnectPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Rtmp On Publish Done
     * @param {PrivateApiRtmpOnPublishDonePostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    rtmpOnPublishDonePost(requestParameters?: PrivateApiRtmpOnPublishDonePostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Rtmp On Publish
     * @param {PrivateApiRtmpOnPublishPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    rtmpOnPublishPost(requestParameters?: PrivateApiRtmpOnPublishPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update Post Content View
     * @param {PrivateApiUpdatePostContentViewPostRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    updatePostContentViewPost(requestParameters: PrivateApiUpdatePostContentViewPostRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
    /**
     *
     * @summary Update Story Content View
     * @param {PrivateApiUpdateStoryContentViewPutRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PrivateApi
     */
    updateStoryContentViewPut(requestParameters: PrivateApiUpdateStoryContentViewPutRequest, options?: RawAxiosRequestConfig): Promise<import("axios").AxiosResponse<any, any>>;
}
